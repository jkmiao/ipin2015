#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ipin.rpc.etl.ext_info import ExtInfoService
from ipin.rpc.etl.ext_info.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void processCvExtra(CvMeasure cvMeasure, i32 uid)')
  print('  void processJdExtra(JdMeasure jdMeasure, i32 uid)')
  print('  void processJdExtraById(string jdId, i32 uid)')
  print('   genCvVector(CvMeasure cvMeasure, i32 uid)')
  print('  JdVector genJdVector(JdMergedInfo info, i32 uid)')
  print('  void genCvJdMatchInfo(i32 uid)')
  print('   listCvJdMatchInfoByJdId(string jdId)')
  print('   listCvJdMatchInfoByUid(string uid)')
  print('  JdMergedInfo getJdMergedInfo(string jdMergedId)')
  print('   listJdMergedInfoByUid(i32 uid)')
  print('  void hideJdAndCvByAccountId(string accountId)')
  print('  void setJdStatus(JdStatus jdStatus)')
  print('  void setStatistics(Statistics s)')
  print('  i32 getStatisticsCount( owners, StreamStatus status)')
  print('  void updateStatistics(string accountId, string recordId, StreamStatus status)')
  print('  void updateJdStreamStatus(string type, string indexUrl, i64 status)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ExtInfoService.Client(protocol)
transport.open()

if cmd == 'processCvExtra':
  if len(args) != 2:
    print('processCvExtra requires 2 args')
    sys.exit(1)
  pp.pprint(client.processCvExtra(eval(args[0]),eval(args[1]),))

elif cmd == 'processJdExtra':
  if len(args) != 2:
    print('processJdExtra requires 2 args')
    sys.exit(1)
  pp.pprint(client.processJdExtra(eval(args[0]),eval(args[1]),))

elif cmd == 'processJdExtraById':
  if len(args) != 2:
    print('processJdExtraById requires 2 args')
    sys.exit(1)
  pp.pprint(client.processJdExtraById(args[0],eval(args[1]),))

elif cmd == 'genCvVector':
  if len(args) != 2:
    print('genCvVector requires 2 args')
    sys.exit(1)
  pp.pprint(client.genCvVector(eval(args[0]),eval(args[1]),))

elif cmd == 'genJdVector':
  if len(args) != 2:
    print('genJdVector requires 2 args')
    sys.exit(1)
  pp.pprint(client.genJdVector(eval(args[0]),eval(args[1]),))

elif cmd == 'genCvJdMatchInfo':
  if len(args) != 1:
    print('genCvJdMatchInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.genCvJdMatchInfo(eval(args[0]),))

elif cmd == 'listCvJdMatchInfoByJdId':
  if len(args) != 1:
    print('listCvJdMatchInfoByJdId requires 1 args')
    sys.exit(1)
  pp.pprint(client.listCvJdMatchInfoByJdId(args[0],))

elif cmd == 'listCvJdMatchInfoByUid':
  if len(args) != 1:
    print('listCvJdMatchInfoByUid requires 1 args')
    sys.exit(1)
  pp.pprint(client.listCvJdMatchInfoByUid(args[0],))

elif cmd == 'getJdMergedInfo':
  if len(args) != 1:
    print('getJdMergedInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJdMergedInfo(args[0],))

elif cmd == 'listJdMergedInfoByUid':
  if len(args) != 1:
    print('listJdMergedInfoByUid requires 1 args')
    sys.exit(1)
  pp.pprint(client.listJdMergedInfoByUid(eval(args[0]),))

elif cmd == 'hideJdAndCvByAccountId':
  if len(args) != 1:
    print('hideJdAndCvByAccountId requires 1 args')
    sys.exit(1)
  pp.pprint(client.hideJdAndCvByAccountId(args[0],))

elif cmd == 'setJdStatus':
  if len(args) != 1:
    print('setJdStatus requires 1 args')
    sys.exit(1)
  pp.pprint(client.setJdStatus(eval(args[0]),))

elif cmd == 'setStatistics':
  if len(args) != 1:
    print('setStatistics requires 1 args')
    sys.exit(1)
  pp.pprint(client.setStatistics(eval(args[0]),))

elif cmd == 'getStatisticsCount':
  if len(args) != 2:
    print('getStatisticsCount requires 2 args')
    sys.exit(1)
  pp.pprint(client.getStatisticsCount(eval(args[0]),eval(args[1]),))

elif cmd == 'updateStatistics':
  if len(args) != 3:
    print('updateStatistics requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateStatistics(args[0],args[1],eval(args[2]),))

elif cmd == 'updateJdStreamStatus':
  if len(args) != 3:
    print('updateJdStreamStatus requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateJdStreamStatus(args[0],args[1],eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
