#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ipin.rpc.etl.jd.store import JdStoreService
from ipin.rpc.etl.jd.store.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string queryJdId(string indexUrl, string contentSign)')
  print('  JdRaw getJdRaw(string jdId)')
  print('  void setJdRaw(JdRaw jdRaw)')
  print('  void setJdRawBulk( jdRaws)')
  print('  JdMeasure getJdMeasure(string jdId)')
  print('  void setJdMeasure(JdMeasure jdMeasure)')
  print('  void setJdMeasureBulk( jdMeasures)')
  print('  string getJdIdByIndexUrl(string indexUrl)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = JdStoreService.Client(protocol)
transport.open()

if cmd == 'queryJdId':
  if len(args) != 2:
    print('queryJdId requires 2 args')
    sys.exit(1)
  pp.pprint(client.queryJdId(args[0],args[1],))

elif cmd == 'getJdRaw':
  if len(args) != 1:
    print('getJdRaw requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJdRaw(args[0],))

elif cmd == 'setJdRaw':
  if len(args) != 1:
    print('setJdRaw requires 1 args')
    sys.exit(1)
  pp.pprint(client.setJdRaw(eval(args[0]),))

elif cmd == 'setJdRawBulk':
  if len(args) != 1:
    print('setJdRawBulk requires 1 args')
    sys.exit(1)
  pp.pprint(client.setJdRawBulk(eval(args[0]),))

elif cmd == 'getJdMeasure':
  if len(args) != 1:
    print('getJdMeasure requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJdMeasure(args[0],))

elif cmd == 'setJdMeasure':
  if len(args) != 1:
    print('setJdMeasure requires 1 args')
    sys.exit(1)
  pp.pprint(client.setJdMeasure(eval(args[0]),))

elif cmd == 'setJdMeasureBulk':
  if len(args) != 1:
    print('setJdMeasureBulk requires 1 args')
    sys.exit(1)
  pp.pprint(client.setJdMeasureBulk(eval(args[0]),))

elif cmd == 'getJdIdByIndexUrl':
  if len(args) != 1:
    print('getJdIdByIndexUrl requires 1 args')
    sys.exit(1)
  pp.pprint(client.getJdIdByIndexUrl(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
