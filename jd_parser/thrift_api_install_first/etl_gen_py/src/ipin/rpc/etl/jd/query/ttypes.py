# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class JD_QUERY_ORDER_BY(object):
  BY_JD_SALARY = 1
  BY_INC_SALARY_RANK = 2
  BY_INC_RANK = 3
  BY_RELATE = 4

  _VALUES_TO_NAMES = {
    1: "BY_JD_SALARY",
    2: "BY_INC_SALARY_RANK",
    3: "BY_INC_RANK",
    4: "BY_RELATE",
  }

  _NAMES_TO_VALUES = {
    "BY_JD_SALARY": 1,
    "BY_INC_SALARY_RANK": 2,
    "BY_INC_RANK": 3,
    "BY_RELATE": 4,
  }

class JD_QUERY_ORDER(object):
  ORDER_ASC = 1
  ORDER_DESC = 2

  _VALUES_TO_NAMES = {
    1: "ORDER_ASC",
    2: "ORDER_DESC",
  }

  _NAMES_TO_VALUES = {
    "ORDER_ASC": 1,
    "ORDER_DESC": 2,
  }


class JdForQuery(object):
  """
  Attributes:
   - jdId
   - jdPositionVec
   - jdPositionLshList
   - jdDescVec
   - jdDescLshList
   - pubDate
   - salary
   - workLocId
   - incRank
   - workAge
   - indId
   - jobCate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jdId', None, None, ), # 1
    (2, TType.LIST, 'jdPositionVec', (TType.DOUBLE,None), None, ), # 2
    None, # 3
    (4, TType.LIST, 'jdDescVec', (TType.DOUBLE,None), None, ), # 4
    None, # 5
    (6, TType.I64, 'pubDate', None, None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'salary', None, None, ), # 10
    (11, TType.STRING, 'workLocId', None, None, ), # 11
    (12, TType.DOUBLE, 'incRank', None, None, ), # 12
    (13, TType.I16, 'workAge', None, None, ), # 13
    (14, TType.I16, 'indId', None, None, ), # 14
    (15, TType.STRING, 'jobCate', None, None, ), # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    None, # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    (301, TType.LIST, 'jdPositionLshList', (TType.STRING,None), None, ), # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    (501, TType.LIST, 'jdDescLshList', (TType.STRING,None), None, ), # 501
  )

  def __init__(self, jdId=None, jdPositionVec=None, jdPositionLshList=None, jdDescVec=None, jdDescLshList=None, pubDate=None, salary=None, workLocId=None, incRank=None, workAge=None, indId=None, jobCate=None,):
    self.jdId = jdId
    self.jdPositionVec = jdPositionVec
    self.jdPositionLshList = jdPositionLshList
    self.jdDescVec = jdDescVec
    self.jdDescLshList = jdDescLshList
    self.pubDate = pubDate
    self.salary = salary
    self.workLocId = workLocId
    self.incRank = incRank
    self.workAge = workAge
    self.indId = indId
    self.jobCate = jobCate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jdId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.jdPositionVec = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readDouble();
            self.jdPositionVec.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 301:
        if ftype == TType.LIST:
          self.jdPositionLshList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.jdPositionLshList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.jdDescVec = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readDouble();
            self.jdDescVec.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 501:
        if ftype == TType.LIST:
          self.jdDescLshList = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString().decode('utf-8')
            self.jdDescLshList.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.pubDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.salary = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.workLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.incRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.workAge = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.indId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdForQuery')
    if self.jdId is not None:
      oprot.writeFieldBegin('jdId', TType.STRING, 1)
      oprot.writeString(self.jdId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdPositionVec is not None:
      oprot.writeFieldBegin('jdPositionVec', TType.LIST, 2)
      oprot.writeListBegin(TType.DOUBLE, len(self.jdPositionVec))
      for iter24 in self.jdPositionVec:
        oprot.writeDouble(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdDescVec is not None:
      oprot.writeFieldBegin('jdDescVec', TType.LIST, 4)
      oprot.writeListBegin(TType.DOUBLE, len(self.jdDescVec))
      for iter25 in self.jdDescVec:
        oprot.writeDouble(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pubDate is not None:
      oprot.writeFieldBegin('pubDate', TType.I64, 6)
      oprot.writeI64(self.pubDate)
      oprot.writeFieldEnd()
    if self.salary is not None:
      oprot.writeFieldBegin('salary', TType.I32, 10)
      oprot.writeI32(self.salary)
      oprot.writeFieldEnd()
    if self.workLocId is not None:
      oprot.writeFieldBegin('workLocId', TType.STRING, 11)
      oprot.writeString(self.workLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incRank is not None:
      oprot.writeFieldBegin('incRank', TType.DOUBLE, 12)
      oprot.writeDouble(self.incRank)
      oprot.writeFieldEnd()
    if self.workAge is not None:
      oprot.writeFieldBegin('workAge', TType.I16, 13)
      oprot.writeI16(self.workAge)
      oprot.writeFieldEnd()
    if self.indId is not None:
      oprot.writeFieldBegin('indId', TType.I16, 14)
      oprot.writeI16(self.indId)
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 15)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdPositionLshList is not None:
      oprot.writeFieldBegin('jdPositionLshList', TType.LIST, 301)
      oprot.writeListBegin(TType.STRING, len(self.jdPositionLshList))
      for iter26 in self.jdPositionLshList:
        oprot.writeString(iter26.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdDescLshList is not None:
      oprot.writeFieldBegin('jdDescLshList', TType.LIST, 501)
      oprot.writeListBegin(TType.STRING, len(self.jdDescLshList))
      for iter27 in self.jdDescLshList:
        oprot.writeString(iter27.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jdId)
    value = (value * 31) ^ hash(self.jdPositionVec)
    value = (value * 31) ^ hash(self.jdPositionLshList)
    value = (value * 31) ^ hash(self.jdDescVec)
    value = (value * 31) ^ hash(self.jdDescLshList)
    value = (value * 31) ^ hash(self.pubDate)
    value = (value * 31) ^ hash(self.salary)
    value = (value * 31) ^ hash(self.workLocId)
    value = (value * 31) ^ hash(self.incRank)
    value = (value * 31) ^ hash(self.workAge)
    value = (value * 31) ^ hash(self.indId)
    value = (value * 31) ^ hash(self.jobCate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdQueryFilter(object):
  """
  Attributes:
   - filterBySalary
   - minSalary
   - maxSalary
   - filterBySalaryRank
   - minSalaryRank
   - maxSalaryRank
   - filterByIncRank
   - minIncRank
   - maxIncRank
   - filterByWorkLocId
   - workLocId
   - filterByIndId
   - indId
   - filterByWorkAge
   - minWorkAge
   - maxWorkAge
   - filterByPubDate
   - minPubDate
   - filterByJobCate
   - jobCate
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'filterBySalary', None, None, ), # 10
    (11, TType.I32, 'minSalary', None, None, ), # 11
    (12, TType.I32, 'maxSalary', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.BOOL, 'filterBySalaryRank', None, None, ), # 20
    (21, TType.DOUBLE, 'minSalaryRank', None, None, ), # 21
    (22, TType.DOUBLE, 'maxSalaryRank', None, None, ), # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.BOOL, 'filterByIncRank', None, None, ), # 30
    (31, TType.DOUBLE, 'minIncRank', None, None, ), # 31
    (32, TType.DOUBLE, 'maxIncRank', None, None, ), # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.BOOL, 'filterByWorkLocId', None, None, ), # 40
    (41, TType.STRING, 'workLocId', None, None, ), # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.BOOL, 'filterByIndId', None, None, ), # 50
    (51, TType.I16, 'indId', None, None, ), # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.BOOL, 'filterByWorkAge', None, None, ), # 60
    (61, TType.I16, 'minWorkAge', None, None, ), # 61
    (62, TType.I16, 'maxWorkAge', None, None, ), # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.BOOL, 'filterByPubDate', None, None, ), # 70
    (71, TType.I64, 'minPubDate', None, None, ), # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.BOOL, 'filterByJobCate', None, None, ), # 80
    (81, TType.STRING, 'jobCate', None, None, ), # 81
  )

  def __init__(self, filterBySalary=None, minSalary=None, maxSalary=None, filterBySalaryRank=None, minSalaryRank=None, maxSalaryRank=None, filterByIncRank=None, minIncRank=None, maxIncRank=None, filterByWorkLocId=None, workLocId=None, filterByIndId=None, indId=None, filterByWorkAge=None, minWorkAge=None, maxWorkAge=None, filterByPubDate=None, minPubDate=None, filterByJobCate=None, jobCate=None,):
    self.filterBySalary = filterBySalary
    self.minSalary = minSalary
    self.maxSalary = maxSalary
    self.filterBySalaryRank = filterBySalaryRank
    self.minSalaryRank = minSalaryRank
    self.maxSalaryRank = maxSalaryRank
    self.filterByIncRank = filterByIncRank
    self.minIncRank = minIncRank
    self.maxIncRank = maxIncRank
    self.filterByWorkLocId = filterByWorkLocId
    self.workLocId = workLocId
    self.filterByIndId = filterByIndId
    self.indId = indId
    self.filterByWorkAge = filterByWorkAge
    self.minWorkAge = minWorkAge
    self.maxWorkAge = maxWorkAge
    self.filterByPubDate = filterByPubDate
    self.minPubDate = minPubDate
    self.filterByJobCate = filterByJobCate
    self.jobCate = jobCate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.BOOL:
          self.filterBySalary = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.minSalary = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.maxSalary = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.filterBySalaryRank = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.minSalaryRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.maxSalaryRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.filterByIncRank = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.minIncRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.DOUBLE:
          self.maxIncRank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.filterByWorkLocId = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.workLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.BOOL:
          self.filterByIndId = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I16:
          self.indId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.BOOL:
          self.filterByWorkAge = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.I16:
          self.minWorkAge = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.I16:
          self.maxWorkAge = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.BOOL:
          self.filterByPubDate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.I64:
          self.minPubDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.BOOL:
          self.filterByJobCate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 81:
        if ftype == TType.STRING:
          self.jobCate = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdQueryFilter')
    if self.filterBySalary is not None:
      oprot.writeFieldBegin('filterBySalary', TType.BOOL, 10)
      oprot.writeBool(self.filterBySalary)
      oprot.writeFieldEnd()
    if self.minSalary is not None:
      oprot.writeFieldBegin('minSalary', TType.I32, 11)
      oprot.writeI32(self.minSalary)
      oprot.writeFieldEnd()
    if self.maxSalary is not None:
      oprot.writeFieldBegin('maxSalary', TType.I32, 12)
      oprot.writeI32(self.maxSalary)
      oprot.writeFieldEnd()
    if self.filterBySalaryRank is not None:
      oprot.writeFieldBegin('filterBySalaryRank', TType.BOOL, 20)
      oprot.writeBool(self.filterBySalaryRank)
      oprot.writeFieldEnd()
    if self.minSalaryRank is not None:
      oprot.writeFieldBegin('minSalaryRank', TType.DOUBLE, 21)
      oprot.writeDouble(self.minSalaryRank)
      oprot.writeFieldEnd()
    if self.maxSalaryRank is not None:
      oprot.writeFieldBegin('maxSalaryRank', TType.DOUBLE, 22)
      oprot.writeDouble(self.maxSalaryRank)
      oprot.writeFieldEnd()
    if self.filterByIncRank is not None:
      oprot.writeFieldBegin('filterByIncRank', TType.BOOL, 30)
      oprot.writeBool(self.filterByIncRank)
      oprot.writeFieldEnd()
    if self.minIncRank is not None:
      oprot.writeFieldBegin('minIncRank', TType.DOUBLE, 31)
      oprot.writeDouble(self.minIncRank)
      oprot.writeFieldEnd()
    if self.maxIncRank is not None:
      oprot.writeFieldBegin('maxIncRank', TType.DOUBLE, 32)
      oprot.writeDouble(self.maxIncRank)
      oprot.writeFieldEnd()
    if self.filterByWorkLocId is not None:
      oprot.writeFieldBegin('filterByWorkLocId', TType.BOOL, 40)
      oprot.writeBool(self.filterByWorkLocId)
      oprot.writeFieldEnd()
    if self.workLocId is not None:
      oprot.writeFieldBegin('workLocId', TType.STRING, 41)
      oprot.writeString(self.workLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.filterByIndId is not None:
      oprot.writeFieldBegin('filterByIndId', TType.BOOL, 50)
      oprot.writeBool(self.filterByIndId)
      oprot.writeFieldEnd()
    if self.indId is not None:
      oprot.writeFieldBegin('indId', TType.I16, 51)
      oprot.writeI16(self.indId)
      oprot.writeFieldEnd()
    if self.filterByWorkAge is not None:
      oprot.writeFieldBegin('filterByWorkAge', TType.BOOL, 60)
      oprot.writeBool(self.filterByWorkAge)
      oprot.writeFieldEnd()
    if self.minWorkAge is not None:
      oprot.writeFieldBegin('minWorkAge', TType.I16, 61)
      oprot.writeI16(self.minWorkAge)
      oprot.writeFieldEnd()
    if self.maxWorkAge is not None:
      oprot.writeFieldBegin('maxWorkAge', TType.I16, 62)
      oprot.writeI16(self.maxWorkAge)
      oprot.writeFieldEnd()
    if self.filterByPubDate is not None:
      oprot.writeFieldBegin('filterByPubDate', TType.BOOL, 70)
      oprot.writeBool(self.filterByPubDate)
      oprot.writeFieldEnd()
    if self.minPubDate is not None:
      oprot.writeFieldBegin('minPubDate', TType.I64, 71)
      oprot.writeI64(self.minPubDate)
      oprot.writeFieldEnd()
    if self.filterByJobCate is not None:
      oprot.writeFieldBegin('filterByJobCate', TType.BOOL, 80)
      oprot.writeBool(self.filterByJobCate)
      oprot.writeFieldEnd()
    if self.jobCate is not None:
      oprot.writeFieldBegin('jobCate', TType.STRING, 81)
      oprot.writeString(self.jobCate.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filterBySalary)
    value = (value * 31) ^ hash(self.minSalary)
    value = (value * 31) ^ hash(self.maxSalary)
    value = (value * 31) ^ hash(self.filterBySalaryRank)
    value = (value * 31) ^ hash(self.minSalaryRank)
    value = (value * 31) ^ hash(self.maxSalaryRank)
    value = (value * 31) ^ hash(self.filterByIncRank)
    value = (value * 31) ^ hash(self.minIncRank)
    value = (value * 31) ^ hash(self.maxIncRank)
    value = (value * 31) ^ hash(self.filterByWorkLocId)
    value = (value * 31) ^ hash(self.workLocId)
    value = (value * 31) ^ hash(self.filterByIndId)
    value = (value * 31) ^ hash(self.indId)
    value = (value * 31) ^ hash(self.filterByWorkAge)
    value = (value * 31) ^ hash(self.minWorkAge)
    value = (value * 31) ^ hash(self.maxWorkAge)
    value = (value * 31) ^ hash(self.filterByPubDate)
    value = (value * 31) ^ hash(self.minPubDate)
    value = (value * 31) ^ hash(self.filterByJobCate)
    value = (value * 31) ^ hash(self.jobCate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdQueryRequest(object):
  """
  Attributes:
   - jdPositionVec
   - jdPositionLshList
   - jdPositionWeight
   - jdDescVec
   - jdDescLshList
   - jdDescWeight
   - maxCount
   - minSim
   - filter
   - orderBy
   - order
   - lshSkipBit
   - lshGroupCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'jdPositionVec', (TType.DOUBLE,None), None, ), # 1
    (2, TType.LIST, 'jdPositionLshList', (TType.STRING,None), None, ), # 2
    (3, TType.DOUBLE, 'jdPositionWeight', None, None, ), # 3
    None, # 4
    (5, TType.LIST, 'jdDescVec', (TType.DOUBLE,None), None, ), # 5
    (6, TType.LIST, 'jdDescLshList', (TType.STRING,None), None, ), # 6
    (7, TType.DOUBLE, 'jdDescWeight', None, None, ), # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'maxCount', None, None, ), # 10
    (11, TType.DOUBLE, 'minSim', None, None, ), # 11
    (12, TType.STRUCT, 'filter', (JdQueryFilter, JdQueryFilter.thrift_spec), None, ), # 12
    (13, TType.I32, 'orderBy', None, None, ), # 13
    (14, TType.I32, 'order', None, None, ), # 14
    None, # 15
    (16, TType.I16, 'lshSkipBit', None, None, ), # 16
    (17, TType.I16, 'lshGroupCount', None, 100, ), # 17
  )

  def __init__(self, jdPositionVec=None, jdPositionLshList=None, jdPositionWeight=None, jdDescVec=None, jdDescLshList=None, jdDescWeight=None, maxCount=None, minSim=None, filter=None, orderBy=None, order=None, lshSkipBit=None, lshGroupCount=thrift_spec[17][4],):
    self.jdPositionVec = jdPositionVec
    self.jdPositionLshList = jdPositionLshList
    self.jdPositionWeight = jdPositionWeight
    self.jdDescVec = jdDescVec
    self.jdDescLshList = jdDescLshList
    self.jdDescWeight = jdDescWeight
    self.maxCount = maxCount
    self.minSim = minSim
    self.filter = filter
    self.orderBy = orderBy
    self.order = order
    self.lshSkipBit = lshSkipBit
    self.lshGroupCount = lshGroupCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.jdPositionVec = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readDouble();
            self.jdPositionVec.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.jdPositionLshList = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readString().decode('utf-8')
            self.jdPositionLshList.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.jdPositionWeight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.jdDescVec = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = iprot.readDouble();
            self.jdDescVec.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.jdDescLshList = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = iprot.readString().decode('utf-8')
            self.jdDescLshList.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.jdDescWeight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.maxCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.minSim = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.filter = JdQueryFilter()
          self.filter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.orderBy = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.order = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I16:
          self.lshSkipBit = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          self.lshGroupCount = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdQueryRequest')
    if self.jdPositionVec is not None:
      oprot.writeFieldBegin('jdPositionVec', TType.LIST, 1)
      oprot.writeListBegin(TType.DOUBLE, len(self.jdPositionVec))
      for iter52 in self.jdPositionVec:
        oprot.writeDouble(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdPositionLshList is not None:
      oprot.writeFieldBegin('jdPositionLshList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.jdPositionLshList))
      for iter53 in self.jdPositionLshList:
        oprot.writeString(iter53.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdPositionWeight is not None:
      oprot.writeFieldBegin('jdPositionWeight', TType.DOUBLE, 3)
      oprot.writeDouble(self.jdPositionWeight)
      oprot.writeFieldEnd()
    if self.jdDescVec is not None:
      oprot.writeFieldBegin('jdDescVec', TType.LIST, 5)
      oprot.writeListBegin(TType.DOUBLE, len(self.jdDescVec))
      for iter54 in self.jdDescVec:
        oprot.writeDouble(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdDescLshList is not None:
      oprot.writeFieldBegin('jdDescLshList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.jdDescLshList))
      for iter55 in self.jdDescLshList:
        oprot.writeString(iter55.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdDescWeight is not None:
      oprot.writeFieldBegin('jdDescWeight', TType.DOUBLE, 7)
      oprot.writeDouble(self.jdDescWeight)
      oprot.writeFieldEnd()
    if self.maxCount is not None:
      oprot.writeFieldBegin('maxCount', TType.I32, 10)
      oprot.writeI32(self.maxCount)
      oprot.writeFieldEnd()
    if self.minSim is not None:
      oprot.writeFieldBegin('minSim', TType.DOUBLE, 11)
      oprot.writeDouble(self.minSim)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRUCT, 12)
      self.filter.write(oprot)
      oprot.writeFieldEnd()
    if self.orderBy is not None:
      oprot.writeFieldBegin('orderBy', TType.I32, 13)
      oprot.writeI32(self.orderBy)
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.I32, 14)
      oprot.writeI32(self.order)
      oprot.writeFieldEnd()
    if self.lshSkipBit is not None:
      oprot.writeFieldBegin('lshSkipBit', TType.I16, 16)
      oprot.writeI16(self.lshSkipBit)
      oprot.writeFieldEnd()
    if self.lshGroupCount is not None:
      oprot.writeFieldBegin('lshGroupCount', TType.I16, 17)
      oprot.writeI16(self.lshGroupCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jdPositionVec)
    value = (value * 31) ^ hash(self.jdPositionLshList)
    value = (value * 31) ^ hash(self.jdPositionWeight)
    value = (value * 31) ^ hash(self.jdDescVec)
    value = (value * 31) ^ hash(self.jdDescLshList)
    value = (value * 31) ^ hash(self.jdDescWeight)
    value = (value * 31) ^ hash(self.maxCount)
    value = (value * 31) ^ hash(self.minSim)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.orderBy)
    value = (value * 31) ^ hash(self.order)
    value = (value * 31) ^ hash(self.lshSkipBit)
    value = (value * 31) ^ hash(self.lshGroupCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdQueryResultItem(object):
  """
  Attributes:
   - jdId
   - relate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jdId', None, None, ), # 1
    (2, TType.DOUBLE, 'relate', None, None, ), # 2
  )

  def __init__(self, jdId=None, relate=None,):
    self.jdId = jdId
    self.relate = relate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jdId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.relate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdQueryResultItem')
    if self.jdId is not None:
      oprot.writeFieldBegin('jdId', TType.STRING, 1)
      oprot.writeString(self.jdId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.relate is not None:
      oprot.writeFieldBegin('relate', TType.DOUBLE, 2)
      oprot.writeDouble(self.relate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jdId)
    value = (value * 31) ^ hash(self.relate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdQueryResult(object):
  """
  Attributes:
   - resultList
   - jdPositionLshSelCount
   - jdDescLshSelCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'resultList', (TType.STRUCT,(JdQueryResultItem, JdQueryResultItem.thrift_spec)), None, ), # 1
    (2, TType.I32, 'jdPositionLshSelCount', None, None, ), # 2
    (3, TType.I32, 'jdDescLshSelCount', None, None, ), # 3
  )

  def __init__(self, resultList=None, jdPositionLshSelCount=None, jdDescLshSelCount=None,):
    self.resultList = resultList
    self.jdPositionLshSelCount = jdPositionLshSelCount
    self.jdDescLshSelCount = jdDescLshSelCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = JdQueryResultItem()
            _elem61.read(iprot)
            self.resultList.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.jdPositionLshSelCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.jdDescLshSelCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdQueryResult')
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter62 in self.resultList:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jdPositionLshSelCount is not None:
      oprot.writeFieldBegin('jdPositionLshSelCount', TType.I32, 2)
      oprot.writeI32(self.jdPositionLshSelCount)
      oprot.writeFieldEnd()
    if self.jdDescLshSelCount is not None:
      oprot.writeFieldBegin('jdDescLshSelCount', TType.I32, 3)
      oprot.writeI32(self.jdDescLshSelCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resultList)
    value = (value * 31) ^ hash(self.jdPositionLshSelCount)
    value = (value * 31) ^ hash(self.jdDescLshSelCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
