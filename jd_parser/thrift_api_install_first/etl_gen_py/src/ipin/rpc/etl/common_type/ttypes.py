# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class StreamStatus(object):
  INDEXED = 0
  CRAWLERED = 1
  PARSED = 2
  MEASURED = 3
  MERGED = 4
  VECTORED = 5
  COMPUTED = 6

  _VALUES_TO_NAMES = {
    0: "INDEXED",
    1: "CRAWLERED",
    2: "PARSED",
    3: "MEASURED",
    4: "MERGED",
    5: "VECTORED",
    6: "COMPUTED",
  }

  _NAMES_TO_VALUES = {
    "INDEXED": 0,
    "CRAWLERED": 1,
    "PARSED": 2,
    "MEASURED": 3,
    "MERGED": 4,
    "VECTORED": 5,
    "COMPUTED": 6,
  }

class ValidStatus(object):
  NORMAL = 0
  EXPIRED = 1
  DUPLICATED = 2

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "EXPIRED",
    2: "DUPLICATED",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "EXPIRED": 1,
    "DUPLICATED": 2,
  }

class BIND_STATUS(object):
  HIDDEN = 0
  NORMAL = 1

  _VALUES_TO_NAMES = {
    0: "HIDDEN",
    1: "NORMAL",
  }

  _NAMES_TO_VALUES = {
    "HIDDEN": 0,
    "NORMAL": 1,
  }


class Statistics(object):
  """
  Attributes:
   - recordId
   - timestamp
   - owner
   - accountId
   - status
   - pageType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'recordId', None, None, ), # 1
    (2, TType.I32, 'timestamp', None, None, ), # 2
    (3, TType.STRING, 'owner', None, None, ), # 3
    (4, TType.STRING, 'accountId', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.STRING, 'pageType', None, None, ), # 6
  )

  def __init__(self, recordId=None, timestamp=None, owner=None, accountId=None, status=None, pageType=None,):
    self.recordId = recordId
    self.timestamp = timestamp
    self.owner = owner
    self.accountId = accountId
    self.status = status
    self.pageType = pageType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.recordId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.accountId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.pageType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Statistics')
    if self.recordId is not None:
      oprot.writeFieldBegin('recordId', TType.STRING, 1)
      oprot.writeString(self.recordId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 3)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.STRING, 4)
      oprot.writeString(self.accountId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.pageType is not None:
      oprot.writeFieldBegin('pageType', TType.STRING, 6)
      oprot.writeString(self.pageType.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.recordId)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.accountId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.pageType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JdStatus(object):
  """
  Attributes:
   - indexUrl
   - owner
   - createTimeStamp
   - updateTimeStamp
   - status
   - validStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indexUrl', None, None, ), # 1
    (2, TType.STRING, 'owner', None, None, ), # 2
    (3, TType.I64, 'createTimeStamp', None, None, ), # 3
    (4, TType.I64, 'updateTimeStamp', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.I32, 'validStatus', None, None, ), # 6
  )

  def __init__(self, indexUrl=None, owner=None, createTimeStamp=None, updateTimeStamp=None, status=None, validStatus=None,):
    self.indexUrl = indexUrl
    self.owner = owner
    self.createTimeStamp = createTimeStamp
    self.updateTimeStamp = updateTimeStamp
    self.status = status
    self.validStatus = validStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indexUrl = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.owner = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.createTimeStamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.updateTimeStamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.validStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JdStatus')
    if self.indexUrl is not None:
      oprot.writeFieldBegin('indexUrl', TType.STRING, 1)
      oprot.writeString(self.indexUrl.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 2)
      oprot.writeString(self.owner.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.createTimeStamp is not None:
      oprot.writeFieldBegin('createTimeStamp', TType.I64, 3)
      oprot.writeI64(self.createTimeStamp)
      oprot.writeFieldEnd()
    if self.updateTimeStamp is not None:
      oprot.writeFieldBegin('updateTimeStamp', TType.I64, 4)
      oprot.writeI64(self.updateTimeStamp)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.validStatus is not None:
      oprot.writeFieldBegin('validStatus', TType.I32, 6)
      oprot.writeI32(self.validStatus)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.indexUrl)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.createTimeStamp)
    value = (value * 31) ^ hash(self.updateTimeStamp)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.validStatus)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
