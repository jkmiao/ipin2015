# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ipin.rpc.etl.common_type.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CvPrivateInfoRaw(object):
  """
  Attributes:
   - cvId: cvId
   - cvFrom: 简历渠道
   - keywords: cv关键词
   - userName: 用户名
   - phoneNumber: 手机号
   - email: 邮箱地址
   - qq: qq
   - idNumber: 身份证
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'cvFrom', None, None, ), # 2
    (3, TType.LIST, 'keywords', (TType.STRING,None), [
    ], ), # 3
    (4, TType.STRING, 'userName', None, None, ), # 4
    (5, TType.STRING, 'phoneNumber', None, None, ), # 5
    (6, TType.STRING, 'email', None, None, ), # 6
    None, # 7
    None, # 8
    (9, TType.STRING, 'qq', None, None, ), # 9
    (10, TType.STRING, 'idNumber', None, None, ), # 10
  )

  def __init__(self, cvId=None, cvFrom=None, keywords=thrift_spec[3][4], userName=None, phoneNumber=None, email=None, qq=None, idNumber=None,):
    self.cvId = cvId
    self.cvFrom = cvFrom
    if keywords is self.thrift_spec[3][4]:
      keywords = [
    ]
    self.keywords = keywords
    self.userName = userName
    self.phoneNumber = phoneNumber
    self.email = email
    self.qq = qq
    self.idNumber = idNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.keywords = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.keywords.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phoneNumber = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.email = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.qq = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.idNumber = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvPrivateInfoRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvFrom is not None:
      oprot.writeFieldBegin('cvFrom', TType.STRING, 2)
      oprot.writeString(self.cvFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.keywords is not None:
      oprot.writeFieldBegin('keywords', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.keywords))
      for iter6 in self.keywords:
        oprot.writeString(iter6.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 4)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.phoneNumber is not None:
      oprot.writeFieldBegin('phoneNumber', TType.STRING, 5)
      oprot.writeString(self.phoneNumber.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 6)
      oprot.writeString(self.email.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.qq is not None:
      oprot.writeFieldBegin('qq', TType.STRING, 9)
      oprot.writeString(self.qq.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.idNumber is not None:
      oprot.writeFieldBegin('idNumber', TType.STRING, 10)
      oprot.writeString(self.idNumber.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.cvFrom)
    value = (value * 31) ^ hash(self.keywords)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.phoneNumber)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.qq)
    value = (value * 31) ^ hash(self.idNumber)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvBaseInfoRaw(object):
  """
  Attributes:
   - cvId: cvId
   - updateTime: cv更新时间
   - marriage: 婚姻状况
   - age: 年龄
   - dob: 出生日期
   - height: 身高
   - nowWorkAge: 工作经验时间
   - nowDiploma: 最高学历
   - nowLocation: 当前籍贯
   - nowPolistatus: 当前政治属性
   - nowAddress: 当前联系地址
   - nowZipCode: 当前所在地邮编
   - nowHukou: 当前户口所在地
   - gender: 性别
   - nowInc: 现在的公司
   - intro: 个人简介
   - nowIndustry: 当前所在行业
   - nowPosition: 当前职位
   - recentSchName: 最高学历学校
   - recentMajorName: 最高学历专业
   - overSea: 是否有海外经历
   - recentJobDuration: 最近工作一份工作的时间
   - nowSalary: 目前薪资
   - cvFrom
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'updateTime', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'marriage', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'age', None, None, ), # 6
    (7, TType.STRING, 'dob', None, None, ), # 7
    (8, TType.STRING, 'height', None, None, ), # 8
    (9, TType.STRING, 'nowWorkAge', None, None, ), # 9
    (10, TType.STRING, 'nowDiploma', None, None, ), # 10
    (11, TType.STRING, 'nowLocation', None, None, ), # 11
    (12, TType.STRING, 'nowPolistatus', None, None, ), # 12
    (13, TType.STRING, 'nowAddress', None, None, ), # 13
    (14, TType.STRING, 'nowZipCode', None, None, ), # 14
    (15, TType.STRING, 'nowHukou', None, None, ), # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    (25, TType.STRING, 'gender', None, None, ), # 25
    (26, TType.STRING, 'nowInc', None, None, ), # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'intro', None, None, ), # 30
    (31, TType.STRING, 'nowIndustry', None, None, ), # 31
    (32, TType.STRING, 'nowPosition', None, None, ), # 32
    (33, TType.STRING, 'recentSchName', None, None, ), # 33
    (34, TType.STRING, 'recentMajorName', None, None, ), # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'overSea', None, None, ), # 40
    None, # 41
    (42, TType.STRING, 'recentJobDuration', None, None, ), # 42
    (43, TType.STRING, 'nowSalary', None, None, ), # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'cvFrom', None, None, ), # 50
  )

  def __init__(self, cvId=None, updateTime=None, marriage=None, age=None, dob=None, height=None, nowWorkAge=None, nowDiploma=None, nowLocation=None, nowPolistatus=None, nowAddress=None, nowZipCode=None, nowHukou=None, gender=None, nowInc=None, intro=None, nowIndustry=None, nowPosition=None, recentSchName=None, recentMajorName=None, overSea=None, recentJobDuration=None, nowSalary=None, cvFrom=None,):
    self.cvId = cvId
    self.updateTime = updateTime
    self.marriage = marriage
    self.age = age
    self.dob = dob
    self.height = height
    self.nowWorkAge = nowWorkAge
    self.nowDiploma = nowDiploma
    self.nowLocation = nowLocation
    self.nowPolistatus = nowPolistatus
    self.nowAddress = nowAddress
    self.nowZipCode = nowZipCode
    self.nowHukou = nowHukou
    self.gender = gender
    self.nowInc = nowInc
    self.intro = intro
    self.nowIndustry = nowIndustry
    self.nowPosition = nowPosition
    self.recentSchName = recentSchName
    self.recentMajorName = recentMajorName
    self.overSea = overSea
    self.recentJobDuration = recentJobDuration
    self.nowSalary = nowSalary
    self.cvFrom = cvFrom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.updateTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.marriage = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.age = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.dob = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.height = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.nowWorkAge = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.nowDiploma = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.nowLocation = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.nowPolistatus = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.nowAddress = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.nowZipCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.nowHukou = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.gender = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.nowInc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.intro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.nowIndustry = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.nowPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.recentSchName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.recentMajorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.overSea = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.recentJobDuration = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.nowSalary = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.cvFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvBaseInfoRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.STRING, 2)
      oprot.writeString(self.updateTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.marriage is not None:
      oprot.writeFieldBegin('marriage', TType.STRING, 4)
      oprot.writeString(self.marriage.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.STRING, 6)
      oprot.writeString(self.age.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dob is not None:
      oprot.writeFieldBegin('dob', TType.STRING, 7)
      oprot.writeString(self.dob.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.STRING, 8)
      oprot.writeString(self.height.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowWorkAge is not None:
      oprot.writeFieldBegin('nowWorkAge', TType.STRING, 9)
      oprot.writeString(self.nowWorkAge.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowDiploma is not None:
      oprot.writeFieldBegin('nowDiploma', TType.STRING, 10)
      oprot.writeString(self.nowDiploma.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowLocation is not None:
      oprot.writeFieldBegin('nowLocation', TType.STRING, 11)
      oprot.writeString(self.nowLocation.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowPolistatus is not None:
      oprot.writeFieldBegin('nowPolistatus', TType.STRING, 12)
      oprot.writeString(self.nowPolistatus.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowAddress is not None:
      oprot.writeFieldBegin('nowAddress', TType.STRING, 13)
      oprot.writeString(self.nowAddress.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowZipCode is not None:
      oprot.writeFieldBegin('nowZipCode', TType.STRING, 14)
      oprot.writeString(self.nowZipCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowHukou is not None:
      oprot.writeFieldBegin('nowHukou', TType.STRING, 15)
      oprot.writeString(self.nowHukou.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.STRING, 25)
      oprot.writeString(self.gender.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowInc is not None:
      oprot.writeFieldBegin('nowInc', TType.STRING, 26)
      oprot.writeString(self.nowInc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 30)
      oprot.writeString(self.intro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowIndustry is not None:
      oprot.writeFieldBegin('nowIndustry', TType.STRING, 31)
      oprot.writeString(self.nowIndustry.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowPosition is not None:
      oprot.writeFieldBegin('nowPosition', TType.STRING, 32)
      oprot.writeString(self.nowPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.recentSchName is not None:
      oprot.writeFieldBegin('recentSchName', TType.STRING, 33)
      oprot.writeString(self.recentSchName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.recentMajorName is not None:
      oprot.writeFieldBegin('recentMajorName', TType.STRING, 34)
      oprot.writeString(self.recentMajorName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.overSea is not None:
      oprot.writeFieldBegin('overSea', TType.STRING, 40)
      oprot.writeString(self.overSea.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.recentJobDuration is not None:
      oprot.writeFieldBegin('recentJobDuration', TType.STRING, 42)
      oprot.writeString(self.recentJobDuration.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowSalary is not None:
      oprot.writeFieldBegin('nowSalary', TType.STRING, 43)
      oprot.writeString(self.nowSalary.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvFrom is not None:
      oprot.writeFieldBegin('cvFrom', TType.STRING, 50)
      oprot.writeString(self.cvFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.marriage)
    value = (value * 31) ^ hash(self.age)
    value = (value * 31) ^ hash(self.dob)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.nowWorkAge)
    value = (value * 31) ^ hash(self.nowDiploma)
    value = (value * 31) ^ hash(self.nowLocation)
    value = (value * 31) ^ hash(self.nowPolistatus)
    value = (value * 31) ^ hash(self.nowAddress)
    value = (value * 31) ^ hash(self.nowZipCode)
    value = (value * 31) ^ hash(self.nowHukou)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.nowInc)
    value = (value * 31) ^ hash(self.intro)
    value = (value * 31) ^ hash(self.nowIndustry)
    value = (value * 31) ^ hash(self.nowPosition)
    value = (value * 31) ^ hash(self.recentSchName)
    value = (value * 31) ^ hash(self.recentMajorName)
    value = (value * 31) ^ hash(self.overSea)
    value = (value * 31) ^ hash(self.recentJobDuration)
    value = (value * 31) ^ hash(self.nowSalary)
    value = (value * 31) ^ hash(self.cvFrom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJobExpRaw(object):
  """
  Attributes:
   - cvId: cvId
   - expLocations: 期望工作地点
   - expSalary: 期望薪水
   - expJobTypes: 期望工作类型
   - expPositions: 期望职位
   - expIndustrys: 期望行业
   - ignoreIncs: 勿推荐企业
   - workStatus: 工作状态
   - dutyTime: 到职时间
   - expJobCates: 期望职能
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'expLocations', None, None, ), # 2
    (3, TType.STRING, 'expSalary', None, None, ), # 3
    (4, TType.STRING, 'expJobTypes', None, None, ), # 4
    (5, TType.STRING, 'expPositions', None, None, ), # 5
    (6, TType.STRING, 'expIndustrys', None, None, ), # 6
    (7, TType.STRING, 'ignoreIncs', None, None, ), # 7
    (8, TType.STRING, 'workStatus', None, None, ), # 8
    (9, TType.STRING, 'dutyTime', None, None, ), # 9
    (10, TType.STRING, 'expJobCates', None, None, ), # 10
  )

  def __init__(self, cvId=None, expLocations=None, expSalary=None, expJobTypes=None, expPositions=None, expIndustrys=None, ignoreIncs=None, workStatus=None, dutyTime=None, expJobCates=None,):
    self.cvId = cvId
    self.expLocations = expLocations
    self.expSalary = expSalary
    self.expJobTypes = expJobTypes
    self.expPositions = expPositions
    self.expIndustrys = expIndustrys
    self.ignoreIncs = ignoreIncs
    self.workStatus = workStatus
    self.dutyTime = dutyTime
    self.expJobCates = expJobCates

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.expLocations = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expSalary = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.expJobTypes = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.expPositions = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.expIndustrys = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ignoreIncs = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.workStatus = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.dutyTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.expJobCates = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJobExpRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expLocations is not None:
      oprot.writeFieldBegin('expLocations', TType.STRING, 2)
      oprot.writeString(self.expLocations.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expSalary is not None:
      oprot.writeFieldBegin('expSalary', TType.STRING, 3)
      oprot.writeString(self.expSalary.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expJobTypes is not None:
      oprot.writeFieldBegin('expJobTypes', TType.STRING, 4)
      oprot.writeString(self.expJobTypes.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expPositions is not None:
      oprot.writeFieldBegin('expPositions', TType.STRING, 5)
      oprot.writeString(self.expPositions.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expIndustrys is not None:
      oprot.writeFieldBegin('expIndustrys', TType.STRING, 6)
      oprot.writeString(self.expIndustrys.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ignoreIncs is not None:
      oprot.writeFieldBegin('ignoreIncs', TType.STRING, 7)
      oprot.writeString(self.ignoreIncs.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workStatus is not None:
      oprot.writeFieldBegin('workStatus', TType.STRING, 8)
      oprot.writeString(self.workStatus.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.dutyTime is not None:
      oprot.writeFieldBegin('dutyTime', TType.STRING, 9)
      oprot.writeString(self.dutyTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expJobCates is not None:
      oprot.writeFieldBegin('expJobCates', TType.STRING, 10)
      oprot.writeString(self.expJobCates.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.expLocations)
    value = (value * 31) ^ hash(self.expSalary)
    value = (value * 31) ^ hash(self.expJobTypes)
    value = (value * 31) ^ hash(self.expPositions)
    value = (value * 31) ^ hash(self.expIndustrys)
    value = (value * 31) ^ hash(self.ignoreIncs)
    value = (value * 31) ^ hash(self.workStatus)
    value = (value * 31) ^ hash(self.dutyTime)
    value = (value * 31) ^ hash(self.expJobCates)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvEduItemRaw(object):
  """
  Attributes:
   - itemId: 教育经历id
   - cvId: cvId
   - eduStart: 教育开始时间
   - eduEnd: 教育结束时间
   - schName: 学校名称
   - majorName: 专业名称
   - eduDesc: 教育经历描述
   - eduDiploma: 学历
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    (3, TType.STRING, 'eduStart', None, None, ), # 3
    (4, TType.STRING, 'eduEnd', None, None, ), # 4
    (5, TType.STRING, 'schName', None, None, ), # 5
    (6, TType.STRING, 'majorName', None, None, ), # 6
    (7, TType.STRING, 'eduDesc', None, None, ), # 7
    (8, TType.STRING, 'eduDiploma', None, None, ), # 8
  )

  def __init__(self, itemId=None, cvId=None, eduStart=None, eduEnd=None, schName=None, majorName=None, eduDesc=None, eduDiploma=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.eduStart = eduStart
    self.eduEnd = eduEnd
    self.schName = schName
    self.majorName = majorName
    self.eduDesc = eduDesc
    self.eduDiploma = eduDiploma

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.eduStart = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.eduEnd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.schName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.majorName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.eduDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.eduDiploma = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvEduItemRaw')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduStart is not None:
      oprot.writeFieldBegin('eduStart', TType.STRING, 3)
      oprot.writeString(self.eduStart.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduEnd is not None:
      oprot.writeFieldBegin('eduEnd', TType.STRING, 4)
      oprot.writeString(self.eduEnd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schName is not None:
      oprot.writeFieldBegin('schName', TType.STRING, 5)
      oprot.writeString(self.schName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorName is not None:
      oprot.writeFieldBegin('majorName', TType.STRING, 6)
      oprot.writeString(self.majorName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduDesc is not None:
      oprot.writeFieldBegin('eduDesc', TType.STRING, 7)
      oprot.writeString(self.eduDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduDiploma is not None:
      oprot.writeFieldBegin('eduDiploma', TType.STRING, 8)
      oprot.writeString(self.eduDiploma.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.eduStart)
    value = (value * 31) ^ hash(self.eduEnd)
    value = (value * 31) ^ hash(self.schName)
    value = (value * 31) ^ hash(self.majorName)
    value = (value * 31) ^ hash(self.eduDesc)
    value = (value * 31) ^ hash(self.eduDiploma)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJobItemRaw(object):
  """
  Attributes:
   - itemId: 工作经历id
   - cvId: cvId
   - incName: 公司名称
   - incDesc: 公司描述
   - incEmployee: 公司规模
   - incIndustrys: 公司所在行业
   - incType: 公司类型
   - incLocation: 公司所在地
   - jobStart: 工作开始时间
   - jobEnd: 工作结束时间
   - jobDuration: 工作时间
   - jobSalary: 薪酬
   - jobDepartment: 所在部门
   - jobPosition: 职位
   - jobDesc: 工作描述
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    (3, TType.STRING, 'incName', None, None, ), # 3
    (4, TType.STRING, 'incDesc', None, None, ), # 4
    (5, TType.STRING, 'incEmployee', None, None, ), # 5
    (6, TType.STRING, 'incIndustrys', None, None, ), # 6
    (7, TType.STRING, 'incType', None, None, ), # 7
    (8, TType.STRING, 'incLocation', None, None, ), # 8
    (9, TType.STRING, 'jobStart', None, None, ), # 9
    (10, TType.STRING, 'jobEnd', None, None, ), # 10
    (11, TType.STRING, 'jobDuration', None, None, ), # 11
    (12, TType.STRING, 'jobSalary', None, None, ), # 12
    (13, TType.STRING, 'jobDepartment', None, None, ), # 13
    (14, TType.STRING, 'jobPosition', None, None, ), # 14
    (15, TType.STRING, 'jobDesc', None, None, ), # 15
  )

  def __init__(self, itemId=None, cvId=None, incName=None, incDesc=None, incEmployee=None, incIndustrys=None, incType=None, incLocation=None, jobStart=None, jobEnd=None, jobDuration=None, jobSalary=None, jobDepartment=None, jobPosition=None, jobDesc=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.incName = incName
    self.incDesc = incDesc
    self.incEmployee = incEmployee
    self.incIndustrys = incIndustrys
    self.incType = incType
    self.incLocation = incLocation
    self.jobStart = jobStart
    self.jobEnd = jobEnd
    self.jobDuration = jobDuration
    self.jobSalary = jobSalary
    self.jobDepartment = jobDepartment
    self.jobPosition = jobPosition
    self.jobDesc = jobDesc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.incName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.incDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.incEmployee = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.incIndustrys = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.incType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.incLocation = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.jobStart = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.jobEnd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.jobDuration = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.jobSalary = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.jobDepartment = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.jobPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.jobDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJobItemRaw')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incName is not None:
      oprot.writeFieldBegin('incName', TType.STRING, 3)
      oprot.writeString(self.incName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incDesc is not None:
      oprot.writeFieldBegin('incDesc', TType.STRING, 4)
      oprot.writeString(self.incDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incEmployee is not None:
      oprot.writeFieldBegin('incEmployee', TType.STRING, 5)
      oprot.writeString(self.incEmployee.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incIndustrys is not None:
      oprot.writeFieldBegin('incIndustrys', TType.STRING, 6)
      oprot.writeString(self.incIndustrys.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.STRING, 7)
      oprot.writeString(self.incType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incLocation is not None:
      oprot.writeFieldBegin('incLocation', TType.STRING, 8)
      oprot.writeString(self.incLocation.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobStart is not None:
      oprot.writeFieldBegin('jobStart', TType.STRING, 9)
      oprot.writeString(self.jobStart.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobEnd is not None:
      oprot.writeFieldBegin('jobEnd', TType.STRING, 10)
      oprot.writeString(self.jobEnd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDuration is not None:
      oprot.writeFieldBegin('jobDuration', TType.STRING, 11)
      oprot.writeString(self.jobDuration.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobSalary is not None:
      oprot.writeFieldBegin('jobSalary', TType.STRING, 12)
      oprot.writeString(self.jobSalary.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDepartment is not None:
      oprot.writeFieldBegin('jobDepartment', TType.STRING, 13)
      oprot.writeString(self.jobDepartment.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobPosition is not None:
      oprot.writeFieldBegin('jobPosition', TType.STRING, 14)
      oprot.writeString(self.jobPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDesc is not None:
      oprot.writeFieldBegin('jobDesc', TType.STRING, 15)
      oprot.writeString(self.jobDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.incName)
    value = (value * 31) ^ hash(self.incDesc)
    value = (value * 31) ^ hash(self.incEmployee)
    value = (value * 31) ^ hash(self.incIndustrys)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incLocation)
    value = (value * 31) ^ hash(self.jobStart)
    value = (value * 31) ^ hash(self.jobEnd)
    value = (value * 31) ^ hash(self.jobDuration)
    value = (value * 31) ^ hash(self.jobSalary)
    value = (value * 31) ^ hash(self.jobDepartment)
    value = (value * 31) ^ hash(self.jobPosition)
    value = (value * 31) ^ hash(self.jobDesc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvProItemRaw(object):
  """
  Attributes:
   - cvId
   - itemId
   - proStart
   - proEnd
   - proName
   - proDuty
   - proDesc
   - softwareEnv
   - hardwareEnv
   - devTool
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'proStart', None, None, ), # 3
    (4, TType.STRING, 'proEnd', None, None, ), # 4
    (5, TType.STRING, 'proName', None, None, ), # 5
    (6, TType.STRING, 'proDuty', None, None, ), # 6
    (7, TType.STRING, 'proDesc', None, None, ), # 7
    (8, TType.STRING, 'softwareEnv', None, None, ), # 8
    (9, TType.STRING, 'hardwareEnv', None, None, ), # 9
    (10, TType.STRING, 'devTool', None, None, ), # 10
  )

  def __init__(self, cvId=None, itemId=None, proStart=None, proEnd=None, proName=None, proDuty=None, proDesc=None, softwareEnv=None, hardwareEnv=None, devTool=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.proStart = proStart
    self.proEnd = proEnd
    self.proName = proName
    self.proDuty = proDuty
    self.proDesc = proDesc
    self.softwareEnv = softwareEnv
    self.hardwareEnv = hardwareEnv
    self.devTool = devTool

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.proStart = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.proEnd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.proName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.proDuty = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.proDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.softwareEnv = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.hardwareEnv = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.devTool = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvProItemRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proStart is not None:
      oprot.writeFieldBegin('proStart', TType.STRING, 3)
      oprot.writeString(self.proStart.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proEnd is not None:
      oprot.writeFieldBegin('proEnd', TType.STRING, 4)
      oprot.writeString(self.proEnd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proName is not None:
      oprot.writeFieldBegin('proName', TType.STRING, 5)
      oprot.writeString(self.proName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proDuty is not None:
      oprot.writeFieldBegin('proDuty', TType.STRING, 6)
      oprot.writeString(self.proDuty.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proDesc is not None:
      oprot.writeFieldBegin('proDesc', TType.STRING, 7)
      oprot.writeString(self.proDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.softwareEnv is not None:
      oprot.writeFieldBegin('softwareEnv', TType.STRING, 8)
      oprot.writeString(self.softwareEnv.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.hardwareEnv is not None:
      oprot.writeFieldBegin('hardwareEnv', TType.STRING, 9)
      oprot.writeString(self.hardwareEnv.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.devTool is not None:
      oprot.writeFieldBegin('devTool', TType.STRING, 10)
      oprot.writeString(self.devTool.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.proStart)
    value = (value * 31) ^ hash(self.proEnd)
    value = (value * 31) ^ hash(self.proName)
    value = (value * 31) ^ hash(self.proDuty)
    value = (value * 31) ^ hash(self.proDesc)
    value = (value * 31) ^ hash(self.softwareEnv)
    value = (value * 31) ^ hash(self.hardwareEnv)
    value = (value * 31) ^ hash(self.devTool)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvCertItemRaw(object):
  """
  Attributes:
   - cvId
   - itemId
   - certTime
   - certName
   - certLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'certTime', None, None, ), # 3
    (4, TType.STRING, 'certName', None, None, ), # 4
    (5, TType.STRING, 'certLevel', None, None, ), # 5
  )

  def __init__(self, cvId=None, itemId=None, certTime=None, certName=None, certLevel=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.certTime = certTime
    self.certName = certName
    self.certLevel = certLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.certTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.certName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.certLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvCertItemRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certTime is not None:
      oprot.writeFieldBegin('certTime', TType.STRING, 3)
      oprot.writeString(self.certTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certName is not None:
      oprot.writeFieldBegin('certName', TType.STRING, 4)
      oprot.writeString(self.certName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certLevel is not None:
      oprot.writeFieldBegin('certLevel', TType.STRING, 5)
      oprot.writeString(self.certLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.certTime)
    value = (value * 31) ^ hash(self.certName)
    value = (value * 31) ^ hash(self.certLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvTrainItemRaw(object):
  """
  Attributes:
   - cvId
   - itemId
   - trainStart
   - trainEnd
   - trainAgency
   - trainTitle
   - trainContent
   - trainDesc
   - trainLoc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'trainStart', None, None, ), # 3
    (4, TType.STRING, 'trainEnd', None, None, ), # 4
    (5, TType.STRING, 'trainAgency', None, None, ), # 5
    (6, TType.STRING, 'trainTitle', None, None, ), # 6
    (7, TType.STRING, 'trainContent', None, None, ), # 7
    (8, TType.STRING, 'trainDesc', None, None, ), # 8
    (9, TType.STRING, 'trainLoc', None, None, ), # 9
  )

  def __init__(self, cvId=None, itemId=None, trainStart=None, trainEnd=None, trainAgency=None, trainTitle=None, trainContent=None, trainDesc=None, trainLoc=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.trainStart = trainStart
    self.trainEnd = trainEnd
    self.trainAgency = trainAgency
    self.trainTitle = trainTitle
    self.trainContent = trainContent
    self.trainDesc = trainDesc
    self.trainLoc = trainLoc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.trainStart = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trainEnd = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trainAgency = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.trainTitle = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.trainContent = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.trainDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.trainLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvTrainItemRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainStart is not None:
      oprot.writeFieldBegin('trainStart', TType.STRING, 3)
      oprot.writeString(self.trainStart.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainEnd is not None:
      oprot.writeFieldBegin('trainEnd', TType.STRING, 4)
      oprot.writeString(self.trainEnd.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainAgency is not None:
      oprot.writeFieldBegin('trainAgency', TType.STRING, 5)
      oprot.writeString(self.trainAgency.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainTitle is not None:
      oprot.writeFieldBegin('trainTitle', TType.STRING, 6)
      oprot.writeString(self.trainTitle.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainContent is not None:
      oprot.writeFieldBegin('trainContent', TType.STRING, 7)
      oprot.writeString(self.trainContent.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainDesc is not None:
      oprot.writeFieldBegin('trainDesc', TType.STRING, 8)
      oprot.writeString(self.trainDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainLoc is not None:
      oprot.writeFieldBegin('trainLoc', TType.STRING, 9)
      oprot.writeString(self.trainLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.trainStart)
    value = (value * 31) ^ hash(self.trainEnd)
    value = (value * 31) ^ hash(self.trainAgency)
    value = (value * 31) ^ hash(self.trainTitle)
    value = (value * 31) ^ hash(self.trainContent)
    value = (value * 31) ^ hash(self.trainDesc)
    value = (value * 31) ^ hash(self.trainLoc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvLanguageItemRaw(object):
  """
  Attributes:
   - cvId
   - itemId
   - languageName
   - languageLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'languageName', None, None, ), # 3
    (4, TType.STRING, 'languageLevel', None, None, ), # 4
  )

  def __init__(self, cvId=None, itemId=None, languageName=None, languageLevel=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.languageName = languageName
    self.languageLevel = languageLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.languageName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.languageLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvLanguageItemRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.languageName is not None:
      oprot.writeFieldBegin('languageName', TType.STRING, 3)
      oprot.writeString(self.languageName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.languageLevel is not None:
      oprot.writeFieldBegin('languageLevel', TType.STRING, 4)
      oprot.writeString(self.languageLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.languageName)
    value = (value * 31) ^ hash(self.languageLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvSkillItemRaw(object):
  """
  Attributes:
   - cvId
   - itemId
   - skillName
   - skillLevel
   - skillDuration
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'skillName', None, None, ), # 3
    (4, TType.STRING, 'skillLevel', None, None, ), # 4
    (5, TType.STRING, 'skillDuration', None, None, ), # 5
  )

  def __init__(self, cvId=None, itemId=None, skillName=None, skillLevel=None, skillDuration=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.skillName = skillName
    self.skillLevel = skillLevel
    self.skillDuration = skillDuration

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.skillName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.skillLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.skillDuration = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvSkillItemRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillName is not None:
      oprot.writeFieldBegin('skillName', TType.STRING, 3)
      oprot.writeString(self.skillName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillLevel is not None:
      oprot.writeFieldBegin('skillLevel', TType.STRING, 4)
      oprot.writeString(self.skillLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillDuration is not None:
      oprot.writeFieldBegin('skillDuration', TType.STRING, 5)
      oprot.writeString(self.skillDuration.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.skillName)
    value = (value * 31) ^ hash(self.skillLevel)
    value = (value * 31) ^ hash(self.skillDuration)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvRaw(object):
  """
  Attributes:
   - cvId: cvId
   - cvFrom: cv来源
   - baseInfo: 基本信息
   - jobExp: 求职意向
   - eduList: 教育经历
   - jobList: 工作经历
   - proList: 项目经验
   - trainList: 培训经历
   - languageList: 语言技能
   - certList: 证书
   - skillList: 技能
   - privateInfo: 隐私信息
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'cvFrom', None, None, ), # 2
    (3, TType.STRUCT, 'baseInfo', (CvBaseInfoRaw, CvBaseInfoRaw.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'jobExp', (CvJobExpRaw, CvJobExpRaw.thrift_spec), None, ), # 4
    (5, TType.LIST, 'eduList', (TType.STRUCT,(CvEduItemRaw, CvEduItemRaw.thrift_spec)), [
    ], ), # 5
    (6, TType.LIST, 'jobList', (TType.STRUCT,(CvJobItemRaw, CvJobItemRaw.thrift_spec)), [
    ], ), # 6
    (7, TType.LIST, 'proList', (TType.STRUCT,(CvProItemRaw, CvProItemRaw.thrift_spec)), [
    ], ), # 7
    (8, TType.LIST, 'trainList', (TType.STRUCT,(CvTrainItemRaw, CvTrainItemRaw.thrift_spec)), [
    ], ), # 8
    (9, TType.LIST, 'languageList', (TType.STRUCT,(CvLanguageItemRaw, CvLanguageItemRaw.thrift_spec)), [
    ], ), # 9
    (10, TType.LIST, 'certList', (TType.STRUCT,(CvCertItemRaw, CvCertItemRaw.thrift_spec)), [
    ], ), # 10
    (11, TType.LIST, 'skillList', (TType.STRUCT,(CvSkillItemRaw, CvSkillItemRaw.thrift_spec)), [
    ], ), # 11
    (12, TType.STRUCT, 'privateInfo', (CvPrivateInfoRaw, CvPrivateInfoRaw.thrift_spec), None, ), # 12
  )

  def __init__(self, cvId=None, cvFrom=None, baseInfo=None, jobExp=None, eduList=thrift_spec[5][4], jobList=thrift_spec[6][4], proList=thrift_spec[7][4], trainList=thrift_spec[8][4], languageList=thrift_spec[9][4], certList=thrift_spec[10][4], skillList=thrift_spec[11][4], privateInfo=None,):
    self.cvId = cvId
    self.cvFrom = cvFrom
    self.baseInfo = baseInfo
    self.jobExp = jobExp
    if eduList is self.thrift_spec[5][4]:
      eduList = [
    ]
    self.eduList = eduList
    if jobList is self.thrift_spec[6][4]:
      jobList = [
    ]
    self.jobList = jobList
    if proList is self.thrift_spec[7][4]:
      proList = [
    ]
    self.proList = proList
    if trainList is self.thrift_spec[8][4]:
      trainList = [
    ]
    self.trainList = trainList
    if languageList is self.thrift_spec[9][4]:
      languageList = [
    ]
    self.languageList = languageList
    if certList is self.thrift_spec[10][4]:
      certList = [
    ]
    self.certList = certList
    if skillList is self.thrift_spec[11][4]:
      skillList = [
    ]
    self.skillList = skillList
    self.privateInfo = privateInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.baseInfo = CvBaseInfoRaw()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.jobExp = CvJobExpRaw()
          self.jobExp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.eduList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = CvEduItemRaw()
            _elem12.read(iprot)
            self.eduList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.jobList = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = CvJobItemRaw()
            _elem18.read(iprot)
            self.jobList.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.proList = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = CvProItemRaw()
            _elem24.read(iprot)
            self.proList.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.trainList = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = CvTrainItemRaw()
            _elem30.read(iprot)
            self.trainList.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.languageList = []
          (_etype34, _size31) = iprot.readListBegin()
          for _i35 in xrange(_size31):
            _elem36 = CvLanguageItemRaw()
            _elem36.read(iprot)
            self.languageList.append(_elem36)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.certList = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = CvCertItemRaw()
            _elem42.read(iprot)
            self.certList.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.skillList = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in xrange(_size43):
            _elem48 = CvSkillItemRaw()
            _elem48.read(iprot)
            self.skillList.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.privateInfo = CvPrivateInfoRaw()
          self.privateInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvRaw')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvFrom is not None:
      oprot.writeFieldBegin('cvFrom', TType.STRING, 2)
      oprot.writeString(self.cvFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 3)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.jobExp is not None:
      oprot.writeFieldBegin('jobExp', TType.STRUCT, 4)
      self.jobExp.write(oprot)
      oprot.writeFieldEnd()
    if self.eduList is not None:
      oprot.writeFieldBegin('eduList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.eduList))
      for iter49 in self.eduList:
        iter49.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobList is not None:
      oprot.writeFieldBegin('jobList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.jobList))
      for iter50 in self.jobList:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.proList is not None:
      oprot.writeFieldBegin('proList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.proList))
      for iter51 in self.proList:
        iter51.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trainList is not None:
      oprot.writeFieldBegin('trainList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.trainList))
      for iter52 in self.trainList:
        iter52.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.languageList is not None:
      oprot.writeFieldBegin('languageList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.languageList))
      for iter53 in self.languageList:
        iter53.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.certList is not None:
      oprot.writeFieldBegin('certList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.certList))
      for iter54 in self.certList:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.skillList is not None:
      oprot.writeFieldBegin('skillList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.skillList))
      for iter55 in self.skillList:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.privateInfo is not None:
      oprot.writeFieldBegin('privateInfo', TType.STRUCT, 12)
      self.privateInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.cvFrom)
    value = (value * 31) ^ hash(self.baseInfo)
    value = (value * 31) ^ hash(self.jobExp)
    value = (value * 31) ^ hash(self.eduList)
    value = (value * 31) ^ hash(self.jobList)
    value = (value * 31) ^ hash(self.proList)
    value = (value * 31) ^ hash(self.trainList)
    value = (value * 31) ^ hash(self.languageList)
    value = (value * 31) ^ hash(self.certList)
    value = (value * 31) ^ hash(self.skillList)
    value = (value * 31) ^ hash(self.privateInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvPrivateInfoMeasure(object):
  """
  Attributes:
   - cvId: cvId
   - cvFrom: 简历渠道
   - keywords: cv关键词
   - userName: 用户名
   - phoneNumber: 手机号
   - email: 邮箱地址
   - msn: msn
   - blog: 博客
   - Qq
   - idNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'cvFrom', None, None, ), # 2
    (3, TType.LIST, 'keywords', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'userName', None, None, ), # 4
    (5, TType.STRING, 'phoneNumber', None, None, ), # 5
    (6, TType.STRING, 'email', None, None, ), # 6
    (7, TType.STRING, 'msn', None, None, ), # 7
    (8, TType.STRING, 'blog', None, None, ), # 8
    (9, TType.STRING, 'Qq', None, None, ), # 9
    (10, TType.STRING, 'idNumber', None, None, ), # 10
  )

  def __init__(self, cvId=None, cvFrom=None, keywords=None, userName=None, phoneNumber=None, email=None, msn=None, blog=None, Qq=None, idNumber=None,):
    self.cvId = cvId
    self.cvFrom = cvFrom
    self.keywords = keywords
    self.userName = userName
    self.phoneNumber = phoneNumber
    self.email = email
    self.msn = msn
    self.blog = blog
    self.Qq = Qq
    self.idNumber = idNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.keywords = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readString().decode('utf-8')
            self.keywords.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.userName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phoneNumber = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.email = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.msn = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.blog = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.Qq = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.idNumber = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvPrivateInfoMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvFrom is not None:
      oprot.writeFieldBegin('cvFrom', TType.STRING, 2)
      oprot.writeString(self.cvFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.keywords is not None:
      oprot.writeFieldBegin('keywords', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.keywords))
      for iter62 in self.keywords:
        oprot.writeString(iter62.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 4)
      oprot.writeString(self.userName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.phoneNumber is not None:
      oprot.writeFieldBegin('phoneNumber', TType.STRING, 5)
      oprot.writeString(self.phoneNumber.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 6)
      oprot.writeString(self.email.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.msn is not None:
      oprot.writeFieldBegin('msn', TType.STRING, 7)
      oprot.writeString(self.msn.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.blog is not None:
      oprot.writeFieldBegin('blog', TType.STRING, 8)
      oprot.writeString(self.blog.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.Qq is not None:
      oprot.writeFieldBegin('Qq', TType.STRING, 9)
      oprot.writeString(self.Qq.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.idNumber is not None:
      oprot.writeFieldBegin('idNumber', TType.STRING, 10)
      oprot.writeString(self.idNumber.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.cvFrom)
    value = (value * 31) ^ hash(self.keywords)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.phoneNumber)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.msn)
    value = (value * 31) ^ hash(self.blog)
    value = (value * 31) ^ hash(self.Qq)
    value = (value * 31) ^ hash(self.idNumber)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvBaseInfoMeasure(object):
  """
  Attributes:
   - cvId: cvId
   - updateTime: 更新时间
   - marriage: 婚姻状态 baseinfo_const.MarriageType
   - age: 年龄
   - dob: 生日
   - height: 身高
   - nowWorkAge: 工作经验(单位ms)
   - nowDiploma: 学历 edu_const.DiplomaType
   - nowLocationId: 当前所在地Id
   - nowPolistatus: 政治面貌 baseinfo_const.PoliticsType
   - nowPosition
   - nowHukouLocId: 户口所在地Id
   - gender: 性别 *
   - nowIncId: 现在的公司 *
   - nowIndustryId: 当前行业Id
   - recentSchId: 当前学校Id
   - recentMajorId: 当前专业Id
   - nowOverSea: 是否有海外经历
   - recentJobDuration
   - nowSalary
   - selfEvaluation
   - intro
   - nowAddress
   - cvFrom
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.I64, 'updateTime', None, None, ), # 2
    None, # 3
    (4, TType.BYTE, 'marriage', None, None, ), # 4
    None, # 5
    (6, TType.BYTE, 'age', None, None, ), # 6
    (7, TType.I64, 'dob', None, None, ), # 7
    (8, TType.I16, 'height', None, None, ), # 8
    (9, TType.I64, 'nowWorkAge', None, None, ), # 9
    (10, TType.BYTE, 'nowDiploma', None, None, ), # 10
    (11, TType.STRING, 'nowLocationId', None, None, ), # 11
    (12, TType.BYTE, 'nowPolistatus', None, None, ), # 12
    (13, TType.STRING, 'nowPosition', None, None, ), # 13
    None, # 14
    (15, TType.STRING, 'nowHukouLocId', None, None, ), # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    (25, TType.BYTE, 'gender', None, None, ), # 25
    (26, TType.STRING, 'nowIncId', None, None, ), # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    (31, TType.BYTE, 'nowIndustryId', None, None, ), # 31
    None, # 32
    (33, TType.STRING, 'recentSchId', None, None, ), # 33
    (34, TType.STRING, 'recentMajorId', None, None, ), # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.BOOL, 'nowOverSea', None, None, ), # 40
    None, # 41
    (42, TType.STRING, 'recentJobDuration', None, None, ), # 42
    (43, TType.STRING, 'nowSalary', None, None, ), # 43
    (44, TType.STRING, 'selfEvaluation', None, None, ), # 44
    (45, TType.STRING, 'intro', None, None, ), # 45
    (46, TType.STRING, 'nowAddress', None, None, ), # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'cvFrom', None, None, ), # 50
  )

  def __init__(self, cvId=None, updateTime=None, marriage=None, age=None, dob=None, height=None, nowWorkAge=None, nowDiploma=None, nowLocationId=None, nowPolistatus=None, nowPosition=None, nowHukouLocId=None, gender=None, nowIncId=None, nowIndustryId=None, recentSchId=None, recentMajorId=None, nowOverSea=None, recentJobDuration=None, nowSalary=None, selfEvaluation=None, intro=None, nowAddress=None, cvFrom=None,):
    self.cvId = cvId
    self.updateTime = updateTime
    self.marriage = marriage
    self.age = age
    self.dob = dob
    self.height = height
    self.nowWorkAge = nowWorkAge
    self.nowDiploma = nowDiploma
    self.nowLocationId = nowLocationId
    self.nowPolistatus = nowPolistatus
    self.nowPosition = nowPosition
    self.nowHukouLocId = nowHukouLocId
    self.gender = gender
    self.nowIncId = nowIncId
    self.nowIndustryId = nowIndustryId
    self.recentSchId = recentSchId
    self.recentMajorId = recentMajorId
    self.nowOverSea = nowOverSea
    self.recentJobDuration = recentJobDuration
    self.nowSalary = nowSalary
    self.selfEvaluation = selfEvaluation
    self.intro = intro
    self.nowAddress = nowAddress
    self.cvFrom = cvFrom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.marriage = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self.age = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.dob = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.height = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.nowWorkAge = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BYTE:
          self.nowDiploma = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.nowLocationId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BYTE:
          self.nowPolistatus = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.nowPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.nowHukouLocId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BYTE:
          self.gender = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.nowIncId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BYTE:
          self.nowIndustryId = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.recentSchId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.recentMajorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.nowOverSea = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.recentJobDuration = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.nowSalary = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.selfEvaluation = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.intro = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.STRING:
          self.nowAddress = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.cvFrom = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvBaseInfoMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 2)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.marriage is not None:
      oprot.writeFieldBegin('marriage', TType.BYTE, 4)
      oprot.writeByte(self.marriage)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.BYTE, 6)
      oprot.writeByte(self.age)
      oprot.writeFieldEnd()
    if self.dob is not None:
      oprot.writeFieldBegin('dob', TType.I64, 7)
      oprot.writeI64(self.dob)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I16, 8)
      oprot.writeI16(self.height)
      oprot.writeFieldEnd()
    if self.nowWorkAge is not None:
      oprot.writeFieldBegin('nowWorkAge', TType.I64, 9)
      oprot.writeI64(self.nowWorkAge)
      oprot.writeFieldEnd()
    if self.nowDiploma is not None:
      oprot.writeFieldBegin('nowDiploma', TType.BYTE, 10)
      oprot.writeByte(self.nowDiploma)
      oprot.writeFieldEnd()
    if self.nowLocationId is not None:
      oprot.writeFieldBegin('nowLocationId', TType.STRING, 11)
      oprot.writeString(self.nowLocationId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowPolistatus is not None:
      oprot.writeFieldBegin('nowPolistatus', TType.BYTE, 12)
      oprot.writeByte(self.nowPolistatus)
      oprot.writeFieldEnd()
    if self.nowPosition is not None:
      oprot.writeFieldBegin('nowPosition', TType.STRING, 13)
      oprot.writeString(self.nowPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowHukouLocId is not None:
      oprot.writeFieldBegin('nowHukouLocId', TType.STRING, 15)
      oprot.writeString(self.nowHukouLocId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.BYTE, 25)
      oprot.writeByte(self.gender)
      oprot.writeFieldEnd()
    if self.nowIncId is not None:
      oprot.writeFieldBegin('nowIncId', TType.STRING, 26)
      oprot.writeString(self.nowIncId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowIndustryId is not None:
      oprot.writeFieldBegin('nowIndustryId', TType.BYTE, 31)
      oprot.writeByte(self.nowIndustryId)
      oprot.writeFieldEnd()
    if self.recentSchId is not None:
      oprot.writeFieldBegin('recentSchId', TType.STRING, 33)
      oprot.writeString(self.recentSchId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.recentMajorId is not None:
      oprot.writeFieldBegin('recentMajorId', TType.STRING, 34)
      oprot.writeString(self.recentMajorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowOverSea is not None:
      oprot.writeFieldBegin('nowOverSea', TType.BOOL, 40)
      oprot.writeBool(self.nowOverSea)
      oprot.writeFieldEnd()
    if self.recentJobDuration is not None:
      oprot.writeFieldBegin('recentJobDuration', TType.STRING, 42)
      oprot.writeString(self.recentJobDuration.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowSalary is not None:
      oprot.writeFieldBegin('nowSalary', TType.STRING, 43)
      oprot.writeString(self.nowSalary.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.selfEvaluation is not None:
      oprot.writeFieldBegin('selfEvaluation', TType.STRING, 44)
      oprot.writeString(self.selfEvaluation.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 45)
      oprot.writeString(self.intro.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.nowAddress is not None:
      oprot.writeFieldBegin('nowAddress', TType.STRING, 46)
      oprot.writeString(self.nowAddress.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvFrom is not None:
      oprot.writeFieldBegin('cvFrom', TType.STRING, 50)
      oprot.writeString(self.cvFrom.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.marriage)
    value = (value * 31) ^ hash(self.age)
    value = (value * 31) ^ hash(self.dob)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.nowWorkAge)
    value = (value * 31) ^ hash(self.nowDiploma)
    value = (value * 31) ^ hash(self.nowLocationId)
    value = (value * 31) ^ hash(self.nowPolistatus)
    value = (value * 31) ^ hash(self.nowPosition)
    value = (value * 31) ^ hash(self.nowHukouLocId)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.nowIncId)
    value = (value * 31) ^ hash(self.nowIndustryId)
    value = (value * 31) ^ hash(self.recentSchId)
    value = (value * 31) ^ hash(self.recentMajorId)
    value = (value * 31) ^ hash(self.nowOverSea)
    value = (value * 31) ^ hash(self.recentJobDuration)
    value = (value * 31) ^ hash(self.nowSalary)
    value = (value * 31) ^ hash(self.selfEvaluation)
    value = (value * 31) ^ hash(self.intro)
    value = (value * 31) ^ hash(self.nowAddress)
    value = (value * 31) ^ hash(self.cvFrom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJobExpMeasure(object):
  """
  Attributes:
   - cvId: cvId
   - expLocationIdList: 期望工作地点列表
   - expJobTypeList: 期望工作类型列表 job_const.JobType
   - expPositionList: 期望职位列表
   - expIndustryIdList: 期望行业列表
   - expSalaryMin: 最低薪酬
   - expSalaryMax: 最高薪酬
   - ignoreIncs: 勿推荐企业
   - workStatus: 工作状态
   - dutyTime: 到职时间
   - expJobCates: 期望职能
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.LIST, 'expLocationIdList', (TType.STRING,None), [
    ], ), # 2
    None, # 3
    (4, TType.LIST, 'expJobTypeList', (TType.BYTE,None), [
    ], ), # 4
    (5, TType.LIST, 'expPositionList', (TType.STRING,None), [
    ], ), # 5
    (6, TType.LIST, 'expIndustryIdList', (TType.BYTE,None), [
    ], ), # 6
    (7, TType.I32, 'expSalaryMin', None, None, ), # 7
    (8, TType.I32, 'expSalaryMax', None, None, ), # 8
    (9, TType.STRING, 'ignoreIncs', None, None, ), # 9
    (10, TType.BYTE, 'workStatus', None, None, ), # 10
    (11, TType.STRING, 'dutyTime', None, None, ), # 11
    (12, TType.STRING, 'expJobCates', None, None, ), # 12
  )

  def __init__(self, cvId=None, expLocationIdList=thrift_spec[2][4], expJobTypeList=thrift_spec[4][4], expPositionList=thrift_spec[5][4], expIndustryIdList=thrift_spec[6][4], expSalaryMin=None, expSalaryMax=None, ignoreIncs=None, workStatus=None, dutyTime=None, expJobCates=None,):
    self.cvId = cvId
    if expLocationIdList is self.thrift_spec[2][4]:
      expLocationIdList = [
    ]
    self.expLocationIdList = expLocationIdList
    if expJobTypeList is self.thrift_spec[4][4]:
      expJobTypeList = [
    ]
    self.expJobTypeList = expJobTypeList
    if expPositionList is self.thrift_spec[5][4]:
      expPositionList = [
    ]
    self.expPositionList = expPositionList
    if expIndustryIdList is self.thrift_spec[6][4]:
      expIndustryIdList = [
    ]
    self.expIndustryIdList = expIndustryIdList
    self.expSalaryMin = expSalaryMin
    self.expSalaryMax = expSalaryMax
    self.ignoreIncs = ignoreIncs
    self.workStatus = workStatus
    self.dutyTime = dutyTime
    self.expJobCates = expJobCates

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.expLocationIdList = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readString().decode('utf-8')
            self.expLocationIdList.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.expJobTypeList = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = iprot.readByte();
            self.expJobTypeList.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.expPositionList = []
          (_etype78, _size75) = iprot.readListBegin()
          for _i79 in xrange(_size75):
            _elem80 = iprot.readString().decode('utf-8')
            self.expPositionList.append(_elem80)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.expIndustryIdList = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = iprot.readByte();
            self.expIndustryIdList.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.expSalaryMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.expSalaryMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ignoreIncs = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BYTE:
          self.workStatus = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.dutyTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.expJobCates = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJobExpMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expLocationIdList is not None:
      oprot.writeFieldBegin('expLocationIdList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.expLocationIdList))
      for iter87 in self.expLocationIdList:
        oprot.writeString(iter87.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.expJobTypeList is not None:
      oprot.writeFieldBegin('expJobTypeList', TType.LIST, 4)
      oprot.writeListBegin(TType.BYTE, len(self.expJobTypeList))
      for iter88 in self.expJobTypeList:
        oprot.writeByte(iter88)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.expPositionList is not None:
      oprot.writeFieldBegin('expPositionList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.expPositionList))
      for iter89 in self.expPositionList:
        oprot.writeString(iter89.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.expIndustryIdList is not None:
      oprot.writeFieldBegin('expIndustryIdList', TType.LIST, 6)
      oprot.writeListBegin(TType.BYTE, len(self.expIndustryIdList))
      for iter90 in self.expIndustryIdList:
        oprot.writeByte(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.expSalaryMin is not None:
      oprot.writeFieldBegin('expSalaryMin', TType.I32, 7)
      oprot.writeI32(self.expSalaryMin)
      oprot.writeFieldEnd()
    if self.expSalaryMax is not None:
      oprot.writeFieldBegin('expSalaryMax', TType.I32, 8)
      oprot.writeI32(self.expSalaryMax)
      oprot.writeFieldEnd()
    if self.ignoreIncs is not None:
      oprot.writeFieldBegin('ignoreIncs', TType.STRING, 9)
      oprot.writeString(self.ignoreIncs.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workStatus is not None:
      oprot.writeFieldBegin('workStatus', TType.BYTE, 10)
      oprot.writeByte(self.workStatus)
      oprot.writeFieldEnd()
    if self.dutyTime is not None:
      oprot.writeFieldBegin('dutyTime', TType.STRING, 11)
      oprot.writeString(self.dutyTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.expJobCates is not None:
      oprot.writeFieldBegin('expJobCates', TType.STRING, 12)
      oprot.writeString(self.expJobCates.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.expLocationIdList)
    value = (value * 31) ^ hash(self.expJobTypeList)
    value = (value * 31) ^ hash(self.expPositionList)
    value = (value * 31) ^ hash(self.expIndustryIdList)
    value = (value * 31) ^ hash(self.expSalaryMin)
    value = (value * 31) ^ hash(self.expSalaryMax)
    value = (value * 31) ^ hash(self.ignoreIncs)
    value = (value * 31) ^ hash(self.workStatus)
    value = (value * 31) ^ hash(self.dutyTime)
    value = (value * 31) ^ hash(self.expJobCates)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvEduItemMeasure(object):
  """
  Attributes:
   - itemId: itemId
   - cvId: cvId
   - eduStart: 教育开始时间
   - eduEnd: 教育结束时间
   - schId: 学校Id
   - majorId: 专业Id
   - eduDiploma: 学历 edu_const.DiplomaType
   - tongzhao: 是否统招
   - eduType: 全日制 非全日制
   - eduDesc: 描述
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    (3, TType.I64, 'eduStart', None, None, ), # 3
    (4, TType.I64, 'eduEnd', None, None, ), # 4
    (5, TType.STRING, 'schId', None, None, ), # 5
    (6, TType.STRING, 'majorId', None, None, ), # 6
    None, # 7
    (8, TType.BYTE, 'eduDiploma', None, None, ), # 8
    (9, TType.BOOL, 'tongzhao', None, None, ), # 9
    (10, TType.BYTE, 'eduType', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'eduDesc', None, None, ), # 20
  )

  def __init__(self, itemId=None, cvId=None, eduStart=None, eduEnd=None, schId=None, majorId=None, eduDiploma=None, tongzhao=None, eduType=None, eduDesc=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.eduStart = eduStart
    self.eduEnd = eduEnd
    self.schId = schId
    self.majorId = majorId
    self.eduDiploma = eduDiploma
    self.tongzhao = tongzhao
    self.eduType = eduType
    self.eduDesc = eduDesc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.eduStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.eduEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.schId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.majorId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BYTE:
          self.eduDiploma = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.tongzhao = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BYTE:
          self.eduType = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.eduDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvEduItemMeasure')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduStart is not None:
      oprot.writeFieldBegin('eduStart', TType.I64, 3)
      oprot.writeI64(self.eduStart)
      oprot.writeFieldEnd()
    if self.eduEnd is not None:
      oprot.writeFieldBegin('eduEnd', TType.I64, 4)
      oprot.writeI64(self.eduEnd)
      oprot.writeFieldEnd()
    if self.schId is not None:
      oprot.writeFieldBegin('schId', TType.STRING, 5)
      oprot.writeString(self.schId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.majorId is not None:
      oprot.writeFieldBegin('majorId', TType.STRING, 6)
      oprot.writeString(self.majorId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.eduDiploma is not None:
      oprot.writeFieldBegin('eduDiploma', TType.BYTE, 8)
      oprot.writeByte(self.eduDiploma)
      oprot.writeFieldEnd()
    if self.tongzhao is not None:
      oprot.writeFieldBegin('tongzhao', TType.BOOL, 9)
      oprot.writeBool(self.tongzhao)
      oprot.writeFieldEnd()
    if self.eduType is not None:
      oprot.writeFieldBegin('eduType', TType.BYTE, 10)
      oprot.writeByte(self.eduType)
      oprot.writeFieldEnd()
    if self.eduDesc is not None:
      oprot.writeFieldBegin('eduDesc', TType.STRING, 20)
      oprot.writeString(self.eduDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.eduStart)
    value = (value * 31) ^ hash(self.eduEnd)
    value = (value * 31) ^ hash(self.schId)
    value = (value * 31) ^ hash(self.majorId)
    value = (value * 31) ^ hash(self.eduDiploma)
    value = (value * 31) ^ hash(self.tongzhao)
    value = (value * 31) ^ hash(self.eduType)
    value = (value * 31) ^ hash(self.eduDesc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJobItemMeasure(object):
  """
  Attributes:
   - itemId: itemId
   - cvId: cvId
   - incSegmentId: 公司片段Id
   - incEmployeeMin: 公司规模区间最小人数
   - incEmployeeMax: 公司规模区间最大人数
   - incIndustryIdList: 公司所在行业
   - incType: 公司类型 job_const.IncType
   - incLocationId: 公司所在地Id
   - jobStart: 工作开始时间
   - jobEnd: 工作结束时间
   - jobDuration: 工作时长(单位ms)
   - jobPosition: 工作职位
   - jobDesc: 工作描述
   - incDesc: 公司描述
   - jobSubTeamSize: 下属团队人数
   - jobSalaryMin: 薪酬区间最小值
   - jobSalaryMax: 薪酬区间最大值
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    (3, TType.STRING, 'incSegmentId', None, None, ), # 3
    (4, TType.I32, 'incEmployeeMin', None, None, ), # 4
    (5, TType.I32, 'incEmployeeMax', None, None, ), # 5
    (6, TType.LIST, 'incIndustryIdList', (TType.BYTE,None), [
    ], ), # 6
    (7, TType.BYTE, 'incType', None, None, ), # 7
    (8, TType.STRING, 'incLocationId', None, None, ), # 8
    (9, TType.I64, 'jobStart', None, None, ), # 9
    (10, TType.I64, 'jobEnd', None, None, ), # 10
    (11, TType.I64, 'jobDuration', None, None, ), # 11
    (12, TType.STRING, 'jobPosition', None, None, ), # 12
    (13, TType.STRING, 'jobDesc', None, None, ), # 13
    (14, TType.STRING, 'incDesc', None, None, ), # 14
    None, # 15
    None, # 16
    None, # 17
    (18, TType.I16, 'jobSubTeamSize', None, None, ), # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'jobSalaryMin', None, None, ), # 30
    (31, TType.I32, 'jobSalaryMax', None, None, ), # 31
  )

  def __init__(self, itemId=None, cvId=None, incSegmentId=None, incEmployeeMin=None, incEmployeeMax=None, incIndustryIdList=thrift_spec[6][4], incType=None, incLocationId=None, jobStart=None, jobEnd=None, jobDuration=None, jobPosition=None, jobDesc=None, incDesc=None, jobSubTeamSize=None, jobSalaryMin=None, jobSalaryMax=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.incSegmentId = incSegmentId
    self.incEmployeeMin = incEmployeeMin
    self.incEmployeeMax = incEmployeeMax
    if incIndustryIdList is self.thrift_spec[6][4]:
      incIndustryIdList = [
    ]
    self.incIndustryIdList = incIndustryIdList
    self.incType = incType
    self.incLocationId = incLocationId
    self.jobStart = jobStart
    self.jobEnd = jobEnd
    self.jobDuration = jobDuration
    self.jobPosition = jobPosition
    self.jobDesc = jobDesc
    self.incDesc = incDesc
    self.jobSubTeamSize = jobSubTeamSize
    self.jobSalaryMin = jobSalaryMin
    self.jobSalaryMax = jobSalaryMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.incSegmentId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.incEmployeeMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.incEmployeeMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.incIndustryIdList = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readByte();
            self.incIndustryIdList.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.incType = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.incLocationId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.jobStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.jobEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.jobDuration = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.jobPosition = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.jobDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.incDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I16:
          self.jobSubTeamSize = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.jobSalaryMin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.jobSalaryMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJobItemMeasure')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incSegmentId is not None:
      oprot.writeFieldBegin('incSegmentId', TType.STRING, 3)
      oprot.writeString(self.incSegmentId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incEmployeeMin is not None:
      oprot.writeFieldBegin('incEmployeeMin', TType.I32, 4)
      oprot.writeI32(self.incEmployeeMin)
      oprot.writeFieldEnd()
    if self.incEmployeeMax is not None:
      oprot.writeFieldBegin('incEmployeeMax', TType.I32, 5)
      oprot.writeI32(self.incEmployeeMax)
      oprot.writeFieldEnd()
    if self.incIndustryIdList is not None:
      oprot.writeFieldBegin('incIndustryIdList', TType.LIST, 6)
      oprot.writeListBegin(TType.BYTE, len(self.incIndustryIdList))
      for iter97 in self.incIndustryIdList:
        oprot.writeByte(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.incType is not None:
      oprot.writeFieldBegin('incType', TType.BYTE, 7)
      oprot.writeByte(self.incType)
      oprot.writeFieldEnd()
    if self.incLocationId is not None:
      oprot.writeFieldBegin('incLocationId', TType.STRING, 8)
      oprot.writeString(self.incLocationId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobStart is not None:
      oprot.writeFieldBegin('jobStart', TType.I64, 9)
      oprot.writeI64(self.jobStart)
      oprot.writeFieldEnd()
    if self.jobEnd is not None:
      oprot.writeFieldBegin('jobEnd', TType.I64, 10)
      oprot.writeI64(self.jobEnd)
      oprot.writeFieldEnd()
    if self.jobDuration is not None:
      oprot.writeFieldBegin('jobDuration', TType.I64, 11)
      oprot.writeI64(self.jobDuration)
      oprot.writeFieldEnd()
    if self.jobPosition is not None:
      oprot.writeFieldBegin('jobPosition', TType.STRING, 12)
      oprot.writeString(self.jobPosition.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobDesc is not None:
      oprot.writeFieldBegin('jobDesc', TType.STRING, 13)
      oprot.writeString(self.jobDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.incDesc is not None:
      oprot.writeFieldBegin('incDesc', TType.STRING, 14)
      oprot.writeString(self.incDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jobSubTeamSize is not None:
      oprot.writeFieldBegin('jobSubTeamSize', TType.I16, 18)
      oprot.writeI16(self.jobSubTeamSize)
      oprot.writeFieldEnd()
    if self.jobSalaryMin is not None:
      oprot.writeFieldBegin('jobSalaryMin', TType.I32, 30)
      oprot.writeI32(self.jobSalaryMin)
      oprot.writeFieldEnd()
    if self.jobSalaryMax is not None:
      oprot.writeFieldBegin('jobSalaryMax', TType.I32, 31)
      oprot.writeI32(self.jobSalaryMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.incSegmentId)
    value = (value * 31) ^ hash(self.incEmployeeMin)
    value = (value * 31) ^ hash(self.incEmployeeMax)
    value = (value * 31) ^ hash(self.incIndustryIdList)
    value = (value * 31) ^ hash(self.incType)
    value = (value * 31) ^ hash(self.incLocationId)
    value = (value * 31) ^ hash(self.jobStart)
    value = (value * 31) ^ hash(self.jobEnd)
    value = (value * 31) ^ hash(self.jobDuration)
    value = (value * 31) ^ hash(self.jobPosition)
    value = (value * 31) ^ hash(self.jobDesc)
    value = (value * 31) ^ hash(self.incDesc)
    value = (value * 31) ^ hash(self.jobSubTeamSize)
    value = (value * 31) ^ hash(self.jobSalaryMin)
    value = (value * 31) ^ hash(self.jobSalaryMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvProItemMeasure(object):
  """
  Attributes:
   - cvId
   - itemId
   - proStart
   - proEnd
   - proName
   - proDuty
   - proDesc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.I64, 'proStart', None, None, ), # 3
    (4, TType.I64, 'proEnd', None, None, ), # 4
    (5, TType.STRING, 'proName', None, None, ), # 5
    (6, TType.STRING, 'proDuty', None, None, ), # 6
    (7, TType.STRING, 'proDesc', None, None, ), # 7
  )

  def __init__(self, cvId=None, itemId=None, proStart=None, proEnd=None, proName=None, proDuty=None, proDesc=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.proStart = proStart
    self.proEnd = proEnd
    self.proName = proName
    self.proDuty = proDuty
    self.proDesc = proDesc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.proStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.proEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.proName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.proDuty = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.proDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvProItemMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proStart is not None:
      oprot.writeFieldBegin('proStart', TType.I64, 3)
      oprot.writeI64(self.proStart)
      oprot.writeFieldEnd()
    if self.proEnd is not None:
      oprot.writeFieldBegin('proEnd', TType.I64, 4)
      oprot.writeI64(self.proEnd)
      oprot.writeFieldEnd()
    if self.proName is not None:
      oprot.writeFieldBegin('proName', TType.STRING, 5)
      oprot.writeString(self.proName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proDuty is not None:
      oprot.writeFieldBegin('proDuty', TType.STRING, 6)
      oprot.writeString(self.proDuty.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.proDesc is not None:
      oprot.writeFieldBegin('proDesc', TType.STRING, 7)
      oprot.writeString(self.proDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.proStart)
    value = (value * 31) ^ hash(self.proEnd)
    value = (value * 31) ^ hash(self.proName)
    value = (value * 31) ^ hash(self.proDuty)
    value = (value * 31) ^ hash(self.proDesc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvCertItemMeasure(object):
  """
  Attributes:
   - cvId
   - itemId
   - certTime
   - certName
   - certLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.I64, 'certTime', None, None, ), # 3
    (4, TType.STRING, 'certName', None, None, ), # 4
    (5, TType.STRING, 'certLevel', None, None, ), # 5
  )

  def __init__(self, cvId=None, itemId=None, certTime=None, certName=None, certLevel=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.certTime = certTime
    self.certName = certName
    self.certLevel = certLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.certTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.certName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.certLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvCertItemMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certTime is not None:
      oprot.writeFieldBegin('certTime', TType.I64, 3)
      oprot.writeI64(self.certTime)
      oprot.writeFieldEnd()
    if self.certName is not None:
      oprot.writeFieldBegin('certName', TType.STRING, 4)
      oprot.writeString(self.certName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.certLevel is not None:
      oprot.writeFieldBegin('certLevel', TType.STRING, 5)
      oprot.writeString(self.certLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.certTime)
    value = (value * 31) ^ hash(self.certName)
    value = (value * 31) ^ hash(self.certLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvTrainItemMeasure(object):
  """
  Attributes:
   - cvId
   - itemId
   - trainStart
   - trainEnd
   - trainAgency
   - trainTitle
   - trainContent
   - trainDesc
   - trainLoc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.I64, 'trainStart', None, None, ), # 3
    (4, TType.I64, 'trainEnd', None, None, ), # 4
    (5, TType.STRING, 'trainAgency', None, None, ), # 5
    (6, TType.STRING, 'trainTitle', None, None, ), # 6
    (7, TType.STRING, 'trainContent', None, None, ), # 7
    (8, TType.STRING, 'trainDesc', None, None, ), # 8
    (9, TType.STRING, 'trainLoc', None, None, ), # 9
  )

  def __init__(self, cvId=None, itemId=None, trainStart=None, trainEnd=None, trainAgency=None, trainTitle=None, trainContent=None, trainDesc=None, trainLoc=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.trainStart = trainStart
    self.trainEnd = trainEnd
    self.trainAgency = trainAgency
    self.trainTitle = trainTitle
    self.trainContent = trainContent
    self.trainDesc = trainDesc
    self.trainLoc = trainLoc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.trainStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.trainEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trainAgency = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.trainTitle = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.trainContent = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.trainDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.trainLoc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvTrainItemMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainStart is not None:
      oprot.writeFieldBegin('trainStart', TType.I64, 3)
      oprot.writeI64(self.trainStart)
      oprot.writeFieldEnd()
    if self.trainEnd is not None:
      oprot.writeFieldBegin('trainEnd', TType.I64, 4)
      oprot.writeI64(self.trainEnd)
      oprot.writeFieldEnd()
    if self.trainAgency is not None:
      oprot.writeFieldBegin('trainAgency', TType.STRING, 5)
      oprot.writeString(self.trainAgency.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainTitle is not None:
      oprot.writeFieldBegin('trainTitle', TType.STRING, 6)
      oprot.writeString(self.trainTitle.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainContent is not None:
      oprot.writeFieldBegin('trainContent', TType.STRING, 7)
      oprot.writeString(self.trainContent.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainDesc is not None:
      oprot.writeFieldBegin('trainDesc', TType.STRING, 8)
      oprot.writeString(self.trainDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.trainLoc is not None:
      oprot.writeFieldBegin('trainLoc', TType.STRING, 9)
      oprot.writeString(self.trainLoc.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.trainStart)
    value = (value * 31) ^ hash(self.trainEnd)
    value = (value * 31) ^ hash(self.trainAgency)
    value = (value * 31) ^ hash(self.trainTitle)
    value = (value * 31) ^ hash(self.trainContent)
    value = (value * 31) ^ hash(self.trainDesc)
    value = (value * 31) ^ hash(self.trainLoc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvLanguageItemMeasure(object):
  """
  Attributes:
   - cvId
   - itemId
   - languageName
   - languageLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'languageName', None, None, ), # 3
    (4, TType.STRING, 'languageLevel', None, None, ), # 4
  )

  def __init__(self, cvId=None, itemId=None, languageName=None, languageLevel=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.languageName = languageName
    self.languageLevel = languageLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.languageName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.languageLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvLanguageItemMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.languageName is not None:
      oprot.writeFieldBegin('languageName', TType.STRING, 3)
      oprot.writeString(self.languageName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.languageLevel is not None:
      oprot.writeFieldBegin('languageLevel', TType.STRING, 4)
      oprot.writeString(self.languageLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.languageName)
    value = (value * 31) ^ hash(self.languageLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvSkillItemMeasure(object):
  """
  Attributes:
   - cvId
   - itemId
   - skillName
   - skillLevel
   - skillDuration
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.STRING, 'skillName', None, None, ), # 3
    (4, TType.STRING, 'skillLevel', None, None, ), # 4
    (5, TType.I64, 'skillDuration', None, None, ), # 5
  )

  def __init__(self, cvId=None, itemId=None, skillName=None, skillLevel=None, skillDuration=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.skillName = skillName
    self.skillLevel = skillLevel
    self.skillDuration = skillDuration

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.skillName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.skillLevel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.skillDuration = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvSkillItemMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillName is not None:
      oprot.writeFieldBegin('skillName', TType.STRING, 3)
      oprot.writeString(self.skillName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillLevel is not None:
      oprot.writeFieldBegin('skillLevel', TType.STRING, 4)
      oprot.writeString(self.skillLevel.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.skillDuration is not None:
      oprot.writeFieldBegin('skillDuration', TType.I64, 5)
      oprot.writeI64(self.skillDuration)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.skillName)
    value = (value * 31) ^ hash(self.skillLevel)
    value = (value * 31) ^ hash(self.skillDuration)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvMeasure(object):
  """
  Attributes:
   - cvId: cvId
   - baseInfo: 基本信息
   - jobExp: 求职意向
   - eduList: 教育经历
   - jobList: 工作经历
   - proList: 项目经验
   - trainList: 培训经历
   - languageList: 语言技能
   - certList: 证书
   - skillList: 技能
   - privateInfo: 隐私信息
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRUCT, 'baseInfo', (CvBaseInfoMeasure, CvBaseInfoMeasure.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'jobExp', (CvJobExpMeasure, CvJobExpMeasure.thrift_spec), None, ), # 3
    (4, TType.LIST, 'eduList', (TType.STRUCT,(CvEduItemMeasure, CvEduItemMeasure.thrift_spec)), [
    ], ), # 4
    (5, TType.LIST, 'jobList', (TType.STRUCT,(CvJobItemMeasure, CvJobItemMeasure.thrift_spec)), [
    ], ), # 5
    None, # 6
    (7, TType.LIST, 'proList', (TType.STRUCT,(CvProItemMeasure, CvProItemMeasure.thrift_spec)), [
    ], ), # 7
    (8, TType.LIST, 'trainList', (TType.STRUCT,(CvTrainItemMeasure, CvTrainItemMeasure.thrift_spec)), [
    ], ), # 8
    (9, TType.LIST, 'languageList', (TType.STRUCT,(CvLanguageItemMeasure, CvLanguageItemMeasure.thrift_spec)), [
    ], ), # 9
    (10, TType.LIST, 'certList', (TType.STRUCT,(CvCertItemMeasure, CvCertItemMeasure.thrift_spec)), [
    ], ), # 10
    (11, TType.LIST, 'skillList', (TType.STRUCT,(CvSkillItemMeasure, CvSkillItemMeasure.thrift_spec)), [
    ], ), # 11
    (12, TType.STRUCT, 'privateInfo', (CvPrivateInfoMeasure, CvPrivateInfoMeasure.thrift_spec), None, ), # 12
  )

  def __init__(self, cvId=None, baseInfo=None, jobExp=None, eduList=thrift_spec[4][4], jobList=thrift_spec[5][4], proList=thrift_spec[7][4], trainList=thrift_spec[8][4], languageList=thrift_spec[9][4], certList=thrift_spec[10][4], skillList=thrift_spec[11][4], privateInfo=None,):
    self.cvId = cvId
    self.baseInfo = baseInfo
    self.jobExp = jobExp
    if eduList is self.thrift_spec[4][4]:
      eduList = [
    ]
    self.eduList = eduList
    if jobList is self.thrift_spec[5][4]:
      jobList = [
    ]
    self.jobList = jobList
    if proList is self.thrift_spec[7][4]:
      proList = [
    ]
    self.proList = proList
    if trainList is self.thrift_spec[8][4]:
      trainList = [
    ]
    self.trainList = trainList
    if languageList is self.thrift_spec[9][4]:
      languageList = [
    ]
    self.languageList = languageList
    if certList is self.thrift_spec[10][4]:
      certList = [
    ]
    self.certList = certList
    if skillList is self.thrift_spec[11][4]:
      skillList = [
    ]
    self.skillList = skillList
    self.privateInfo = privateInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseInfo = CvBaseInfoMeasure()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.jobExp = CvJobExpMeasure()
          self.jobExp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.eduList = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = CvEduItemMeasure()
            _elem103.read(iprot)
            self.eduList.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.jobList = []
          (_etype107, _size104) = iprot.readListBegin()
          for _i108 in xrange(_size104):
            _elem109 = CvJobItemMeasure()
            _elem109.read(iprot)
            self.jobList.append(_elem109)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.proList = []
          (_etype113, _size110) = iprot.readListBegin()
          for _i114 in xrange(_size110):
            _elem115 = CvProItemMeasure()
            _elem115.read(iprot)
            self.proList.append(_elem115)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.trainList = []
          (_etype119, _size116) = iprot.readListBegin()
          for _i120 in xrange(_size116):
            _elem121 = CvTrainItemMeasure()
            _elem121.read(iprot)
            self.trainList.append(_elem121)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.languageList = []
          (_etype125, _size122) = iprot.readListBegin()
          for _i126 in xrange(_size122):
            _elem127 = CvLanguageItemMeasure()
            _elem127.read(iprot)
            self.languageList.append(_elem127)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.certList = []
          (_etype131, _size128) = iprot.readListBegin()
          for _i132 in xrange(_size128):
            _elem133 = CvCertItemMeasure()
            _elem133.read(iprot)
            self.certList.append(_elem133)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.skillList = []
          (_etype137, _size134) = iprot.readListBegin()
          for _i138 in xrange(_size134):
            _elem139 = CvSkillItemMeasure()
            _elem139.read(iprot)
            self.skillList.append(_elem139)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.privateInfo = CvPrivateInfoMeasure()
          self.privateInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvMeasure')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 2)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.jobExp is not None:
      oprot.writeFieldBegin('jobExp', TType.STRUCT, 3)
      self.jobExp.write(oprot)
      oprot.writeFieldEnd()
    if self.eduList is not None:
      oprot.writeFieldBegin('eduList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.eduList))
      for iter140 in self.eduList:
        iter140.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jobList is not None:
      oprot.writeFieldBegin('jobList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.jobList))
      for iter141 in self.jobList:
        iter141.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.proList is not None:
      oprot.writeFieldBegin('proList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.proList))
      for iter142 in self.proList:
        iter142.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trainList is not None:
      oprot.writeFieldBegin('trainList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.trainList))
      for iter143 in self.trainList:
        iter143.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.languageList is not None:
      oprot.writeFieldBegin('languageList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.languageList))
      for iter144 in self.languageList:
        iter144.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.certList is not None:
      oprot.writeFieldBegin('certList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.certList))
      for iter145 in self.certList:
        iter145.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.skillList is not None:
      oprot.writeFieldBegin('skillList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.skillList))
      for iter146 in self.skillList:
        iter146.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.privateInfo is not None:
      oprot.writeFieldBegin('privateInfo', TType.STRUCT, 12)
      self.privateInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.baseInfo)
    value = (value * 31) ^ hash(self.jobExp)
    value = (value * 31) ^ hash(self.eduList)
    value = (value * 31) ^ hash(self.jobList)
    value = (value * 31) ^ hash(self.proList)
    value = (value * 31) ^ hash(self.trainList)
    value = (value * 31) ^ hash(self.languageList)
    value = (value * 31) ^ hash(self.certList)
    value = (value * 31) ^ hash(self.skillList)
    value = (value * 31) ^ hash(self.privateInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJdRelation(object):
  """
  Attributes:
   - accountId
   - uid
   - cvId
   - jdId
   - jdMergedId
   - acceptTime
   - acceptTimeStamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'accountId', None, None, ), # 1
    (2, TType.I32, 'uid', None, None, ), # 2
    (3, TType.STRING, 'cvId', None, None, ), # 3
    (4, TType.STRING, 'jdId', None, None, ), # 4
    (5, TType.STRING, 'jdMergedId', None, None, ), # 5
    (6, TType.STRING, 'acceptTime', None, None, ), # 6
    (7, TType.I64, 'acceptTimeStamp', None, None, ), # 7
  )

  def __init__(self, accountId=None, uid=None, cvId=None, jdId=None, jdMergedId=None, acceptTime=None, acceptTimeStamp=None,):
    self.accountId = accountId
    self.uid = uid
    self.cvId = cvId
    self.jdId = jdId
    self.jdMergedId = jdMergedId
    self.acceptTime = acceptTime
    self.acceptTimeStamp = acceptTimeStamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.accountId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jdId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jdMergedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.acceptTime = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.acceptTimeStamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJdRelation')
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.STRING, 1)
      oprot.writeString(self.accountId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 2)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 3)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdId is not None:
      oprot.writeFieldBegin('jdId', TType.STRING, 4)
      oprot.writeString(self.jdId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdMergedId is not None:
      oprot.writeFieldBegin('jdMergedId', TType.STRING, 5)
      oprot.writeString(self.jdMergedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.acceptTime is not None:
      oprot.writeFieldBegin('acceptTime', TType.STRING, 6)
      oprot.writeString(self.acceptTime.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.acceptTimeStamp is not None:
      oprot.writeFieldBegin('acceptTimeStamp', TType.I64, 7)
      oprot.writeI64(self.acceptTimeStamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.accountId)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.jdId)
    value = (value * 31) ^ hash(self.jdMergedId)
    value = (value * 31) ^ hash(self.acceptTime)
    value = (value * 31) ^ hash(self.acceptTimeStamp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvJdMatchInfo(object):
  """
  Attributes:
   - cvId
   - itemId
   - uid
   - cvStatus
   - jdMergedId
   - matchRatio
   - createTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cvId', None, None, ), # 1
    (2, TType.STRING, 'itemId', None, None, ), # 2
    (3, TType.I32, 'uid', None, None, ), # 3
    (4, TType.I32, 'cvStatus', None, None, ), # 4
    (5, TType.STRING, 'jdMergedId', None, None, ), # 5
    (6, TType.DOUBLE, 'matchRatio', None, None, ), # 6
    (7, TType.I64, 'createTimestamp', None, None, ), # 7
  )

  def __init__(self, cvId=None, itemId=None, uid=None, cvStatus=None, jdMergedId=None, matchRatio=None, createTimestamp=None,):
    self.cvId = cvId
    self.itemId = itemId
    self.uid = uid
    self.cvStatus = cvStatus
    self.jdMergedId = jdMergedId
    self.matchRatio = matchRatio
    self.createTimestamp = createTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cvStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jdMergedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.matchRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvJdMatchInfo')
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 1)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 2)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 3)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.cvStatus is not None:
      oprot.writeFieldBegin('cvStatus', TType.I32, 4)
      oprot.writeI32(self.cvStatus)
      oprot.writeFieldEnd()
    if self.jdMergedId is not None:
      oprot.writeFieldBegin('jdMergedId', TType.STRING, 5)
      oprot.writeString(self.jdMergedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.matchRatio is not None:
      oprot.writeFieldBegin('matchRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.matchRatio)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 7)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.cvStatus)
    value = (value * 31) ^ hash(self.jdMergedId)
    value = (value * 31) ^ hash(self.matchRatio)
    value = (value * 31) ^ hash(self.createTimestamp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JobJdMatchInfo(object):
  """
  Attributes:
   - itemId
   - cvId
   - jdMergedId
   - matchRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.STRING, 'jdMergedId', None, None, ), # 5
    (6, TType.DOUBLE, 'matchRatio', None, None, ), # 6
  )

  def __init__(self, itemId=None, cvId=None, jdMergedId=None, matchRatio=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.jdMergedId = jdMergedId
    self.matchRatio = matchRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.jdMergedId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.matchRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JobJdMatchInfo')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.jdMergedId is not None:
      oprot.writeFieldBegin('jdMergedId', TType.STRING, 5)
      oprot.writeString(self.jdMergedId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.matchRatio is not None:
      oprot.writeFieldBegin('matchRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.matchRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.jdMergedId)
    value = (value * 31) ^ hash(self.matchRatio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CvVector(object):
  """
  Attributes:
   - itemId
   - cvId
   - posVector
   - descVector
   - excellentRatio
   - jobStart
   - jobEnd
   - uid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.STRING, 'cvId', None, None, ), # 2
    (3, TType.LIST, 'posVector', (TType.DOUBLE,None), None, ), # 3
    (4, TType.LIST, 'descVector', (TType.DOUBLE,None), None, ), # 4
    (5, TType.DOUBLE, 'excellentRatio', None, None, ), # 5
    (6, TType.I64, 'jobStart', None, None, ), # 6
    (7, TType.I64, 'jobEnd', None, None, ), # 7
    (8, TType.I32, 'uid', None, None, ), # 8
    (9, TType.I32, 'status', None, None, ), # 9
  )

  def __init__(self, itemId=None, cvId=None, posVector=None, descVector=None, excellentRatio=None, jobStart=None, jobEnd=None, uid=None, status=None,):
    self.itemId = itemId
    self.cvId = cvId
    self.posVector = posVector
    self.descVector = descVector
    self.excellentRatio = excellentRatio
    self.jobStart = jobStart
    self.jobEnd = jobEnd
    self.uid = uid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cvId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.posVector = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = iprot.readDouble();
            self.posVector.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.descVector = []
          (_etype156, _size153) = iprot.readListBegin()
          for _i157 in xrange(_size153):
            _elem158 = iprot.readDouble();
            self.descVector.append(_elem158)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.excellentRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.jobStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.jobEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CvVector')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cvId is not None:
      oprot.writeFieldBegin('cvId', TType.STRING, 2)
      oprot.writeString(self.cvId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.posVector is not None:
      oprot.writeFieldBegin('posVector', TType.LIST, 3)
      oprot.writeListBegin(TType.DOUBLE, len(self.posVector))
      for iter159 in self.posVector:
        oprot.writeDouble(iter159)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.descVector is not None:
      oprot.writeFieldBegin('descVector', TType.LIST, 4)
      oprot.writeListBegin(TType.DOUBLE, len(self.descVector))
      for iter160 in self.descVector:
        oprot.writeDouble(iter160)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.excellentRatio is not None:
      oprot.writeFieldBegin('excellentRatio', TType.DOUBLE, 5)
      oprot.writeDouble(self.excellentRatio)
      oprot.writeFieldEnd()
    if self.jobStart is not None:
      oprot.writeFieldBegin('jobStart', TType.I64, 6)
      oprot.writeI64(self.jobStart)
      oprot.writeFieldEnd()
    if self.jobEnd is not None:
      oprot.writeFieldBegin('jobEnd', TType.I64, 7)
      oprot.writeI64(self.jobEnd)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 8)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.cvId)
    value = (value * 31) ^ hash(self.posVector)
    value = (value * 31) ^ hash(self.descVector)
    value = (value * 31) ^ hash(self.excellentRatio)
    value = (value * 31) ^ hash(self.jobStart)
    value = (value * 31) ^ hash(self.jobEnd)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
