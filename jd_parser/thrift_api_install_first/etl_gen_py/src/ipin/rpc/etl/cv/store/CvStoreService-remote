#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ipin.rpc.etl.cv.store import CvStoreService
from ipin.rpc.etl.cv.store.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void setCvRaw(CvRaw cvRaw)')
  print('  CvRaw getCvRaw(string cvId)')
  print('  void setCvMeasure(CvMeasure cvMeasure)')
  print('  CvMeasure getCvMeasure(string cvId)')
  print('   listCvMeasure( cvIdList)')
  print('  CvMeasure getCvMeasureByItemId(string itemId)')
  print('   listCvMeasureByItemId( itemIdList)')
  print('   getCvJobMeasureByItemId(string itemId)')
  print('   listCvJobMeasureByItemId( itemIdList)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CvStoreService.Client(protocol)
transport.open()

if cmd == 'setCvRaw':
  if len(args) != 1:
    print('setCvRaw requires 1 args')
    sys.exit(1)
  pp.pprint(client.setCvRaw(eval(args[0]),))

elif cmd == 'getCvRaw':
  if len(args) != 1:
    print('getCvRaw requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCvRaw(args[0],))

elif cmd == 'setCvMeasure':
  if len(args) != 1:
    print('setCvMeasure requires 1 args')
    sys.exit(1)
  pp.pprint(client.setCvMeasure(eval(args[0]),))

elif cmd == 'getCvMeasure':
  if len(args) != 1:
    print('getCvMeasure requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCvMeasure(args[0],))

elif cmd == 'listCvMeasure':
  if len(args) != 1:
    print('listCvMeasure requires 1 args')
    sys.exit(1)
  pp.pprint(client.listCvMeasure(eval(args[0]),))

elif cmd == 'getCvMeasureByItemId':
  if len(args) != 1:
    print('getCvMeasureByItemId requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCvMeasureByItemId(args[0],))

elif cmd == 'listCvMeasureByItemId':
  if len(args) != 1:
    print('listCvMeasureByItemId requires 1 args')
    sys.exit(1)
  pp.pprint(client.listCvMeasureByItemId(eval(args[0]),))

elif cmd == 'getCvJobMeasureByItemId':
  if len(args) != 1:
    print('getCvJobMeasureByItemId requires 1 args')
    sys.exit(1)
  pp.pprint(client.getCvJobMeasureByItemId(args[0],))

elif cmd == 'listCvJobMeasureByItemId':
  if len(args) != 1:
    print('listCvJobMeasureByItemId requires 1 args')
    sys.exit(1)
  pp.pprint(client.listCvJobMeasureByItemId(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
