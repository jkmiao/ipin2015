# -*- coding:utf8 -*-
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def measureBaseInfo(self, baseInfoRaw):
    """
    量化基本信息

    Parameters:
     - baseInfoRaw
    """
    pass

  def measureJobExp(self, jobExpRaw):
    """
    量化工作期望

    Parameters:
     - jobExpRaw
    """
    pass

  def measureEduItem(self, eduItemRaw):
    """
    量化教育经历

    Parameters:
     - eduItemRaw
    """
    pass

  def measureJobItem(self, jobItemRaw):
    """
    量化工作经历

    Parameters:
     - jobItemRaw
    """
    pass

  def measureCv(self, cvRaw):
    """
    量化整个cv

    Parameters:
     - cvRaw
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def measureBaseInfo(self, baseInfoRaw):
    """
    量化基本信息

    Parameters:
     - baseInfoRaw
    """
    self.send_measureBaseInfo(baseInfoRaw)
    return self.recv_measureBaseInfo()

  def send_measureBaseInfo(self, baseInfoRaw):
    self._oprot.writeMessageBegin('measureBaseInfo', TMessageType.CALL, self._seqid)
    args = measureBaseInfo_args()
    args.baseInfoRaw = baseInfoRaw
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_measureBaseInfo(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = measureBaseInfo_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "measureBaseInfo failed: unknown result");

  def measureJobExp(self, jobExpRaw):
    """
    量化工作期望

    Parameters:
     - jobExpRaw
    """
    self.send_measureJobExp(jobExpRaw)
    return self.recv_measureJobExp()

  def send_measureJobExp(self, jobExpRaw):
    self._oprot.writeMessageBegin('measureJobExp', TMessageType.CALL, self._seqid)
    args = measureJobExp_args()
    args.jobExpRaw = jobExpRaw
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_measureJobExp(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = measureJobExp_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "measureJobExp failed: unknown result");

  def measureEduItem(self, eduItemRaw):
    """
    量化教育经历

    Parameters:
     - eduItemRaw
    """
    self.send_measureEduItem(eduItemRaw)
    return self.recv_measureEduItem()

  def send_measureEduItem(self, eduItemRaw):
    self._oprot.writeMessageBegin('measureEduItem', TMessageType.CALL, self._seqid)
    args = measureEduItem_args()
    args.eduItemRaw = eduItemRaw
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_measureEduItem(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = measureEduItem_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "measureEduItem failed: unknown result");

  def measureJobItem(self, jobItemRaw):
    """
    量化工作经历

    Parameters:
     - jobItemRaw
    """
    self.send_measureJobItem(jobItemRaw)
    return self.recv_measureJobItem()

  def send_measureJobItem(self, jobItemRaw):
    self._oprot.writeMessageBegin('measureJobItem', TMessageType.CALL, self._seqid)
    args = measureJobItem_args()
    args.jobItemRaw = jobItemRaw
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_measureJobItem(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = measureJobItem_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "measureJobItem failed: unknown result");

  def measureCv(self, cvRaw):
    """
    量化整个cv

    Parameters:
     - cvRaw
    """
    self.send_measureCv(cvRaw)
    return self.recv_measureCv()

  def send_measureCv(self, cvRaw):
    self._oprot.writeMessageBegin('measureCv', TMessageType.CALL, self._seqid)
    args = measureCv_args()
    args.cvRaw = cvRaw
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_measureCv(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = measureCv_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.namedError is not None:
      raise result.namedError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "measureCv failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["measureBaseInfo"] = Processor.process_measureBaseInfo
    self._processMap["measureJobExp"] = Processor.process_measureJobExp
    self._processMap["measureEduItem"] = Processor.process_measureEduItem
    self._processMap["measureJobItem"] = Processor.process_measureJobItem
    self._processMap["measureCv"] = Processor.process_measureCv

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_measureBaseInfo(self, seqid, iprot, oprot):
    args = measureBaseInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = measureBaseInfo_result()
    try:
      result.success = self._handler.measureBaseInfo(args.baseInfoRaw)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("measureBaseInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_measureJobExp(self, seqid, iprot, oprot):
    args = measureJobExp_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = measureJobExp_result()
    try:
      result.success = self._handler.measureJobExp(args.jobExpRaw)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("measureJobExp", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_measureEduItem(self, seqid, iprot, oprot):
    args = measureEduItem_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = measureEduItem_result()
    try:
      result.success = self._handler.measureEduItem(args.eduItemRaw)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("measureEduItem", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_measureJobItem(self, seqid, iprot, oprot):
    args = measureJobItem_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = measureJobItem_result()
    try:
      result.success = self._handler.measureJobItem(args.jobItemRaw)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("measureJobItem", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_measureCv(self, seqid, iprot, oprot):
    args = measureCv_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = measureCv_result()
    try:
      result.success = self._handler.measureCv(args.cvRaw)
    except ipin.rpc.common.ttypes.NamedError, namedError:
      result.namedError = namedError
    oprot.writeMessageBegin("measureCv", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class measureBaseInfo_args(object):
  """
  Attributes:
   - baseInfoRaw
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    (3, TType.STRUCT, 'baseInfoRaw', (ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoRaw, ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoRaw.thrift_spec), None, ), # 3
  )

  def __init__(self, baseInfoRaw=None,):
    self.baseInfoRaw = baseInfoRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 3:
        if ftype == TType.STRUCT:
          self.baseInfoRaw = ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoRaw()
          self.baseInfoRaw.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureBaseInfo_args')
    if self.baseInfoRaw is not None:
      oprot.writeFieldBegin('baseInfoRaw', TType.STRUCT, 3)
      self.baseInfoRaw.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.baseInfoRaw)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureBaseInfo_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoMeasure, ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoMeasure.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ipin.rpc.etl.cv.cv_type.ttypes.CvBaseInfoMeasure()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureBaseInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureJobExp_args(object):
  """
  Attributes:
   - jobExpRaw
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'jobExpRaw', (ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpRaw, ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpRaw.thrift_spec), None, ), # 1
  )

  def __init__(self, jobExpRaw=None,):
    self.jobExpRaw = jobExpRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.jobExpRaw = ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpRaw()
          self.jobExpRaw.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureJobExp_args')
    if self.jobExpRaw is not None:
      oprot.writeFieldBegin('jobExpRaw', TType.STRUCT, 1)
      self.jobExpRaw.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobExpRaw)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureJobExp_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpMeasure, ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpMeasure.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ipin.rpc.etl.cv.cv_type.ttypes.CvJobExpMeasure()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureJobExp_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureEduItem_args(object):
  """
  Attributes:
   - eduItemRaw
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'eduItemRaw', (ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemRaw, ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemRaw.thrift_spec), None, ), # 1
  )

  def __init__(self, eduItemRaw=None,):
    self.eduItemRaw = eduItemRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.eduItemRaw = ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemRaw()
          self.eduItemRaw.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureEduItem_args')
    if self.eduItemRaw is not None:
      oprot.writeFieldBegin('eduItemRaw', TType.STRUCT, 1)
      self.eduItemRaw.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.eduItemRaw)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureEduItem_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemMeasure, ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemMeasure.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ipin.rpc.etl.cv.cv_type.ttypes.CvEduItemMeasure()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureEduItem_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureJobItem_args(object):
  """
  Attributes:
   - jobItemRaw
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'jobItemRaw', (ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemRaw, ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemRaw.thrift_spec), None, ), # 1
  )

  def __init__(self, jobItemRaw=None,):
    self.jobItemRaw = jobItemRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.jobItemRaw = ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemRaw()
          self.jobItemRaw.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureJobItem_args')
    if self.jobItemRaw is not None:
      oprot.writeFieldBegin('jobItemRaw', TType.STRUCT, 1)
      self.jobItemRaw.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobItemRaw)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureJobItem_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemMeasure, ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemMeasure.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ipin.rpc.etl.cv.cv_type.ttypes.CvJobItemMeasure()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureJobItem_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureCv_args(object):
  """
  Attributes:
   - cvRaw
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'cvRaw', (ipin.rpc.etl.cv.cv_type.ttypes.CvRaw, ipin.rpc.etl.cv.cv_type.ttypes.CvRaw.thrift_spec), None, ), # 1
  )

  def __init__(self, cvRaw=None,):
    self.cvRaw = cvRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.cvRaw = ipin.rpc.etl.cv.cv_type.ttypes.CvRaw()
          self.cvRaw.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureCv_args')
    if self.cvRaw is not None:
      oprot.writeFieldBegin('cvRaw', TType.STRUCT, 1)
      self.cvRaw.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cvRaw)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class measureCv_result(object):
  """
  Attributes:
   - success
   - namedError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ipin.rpc.etl.cv.cv_type.ttypes.CvMeasure, ipin.rpc.etl.cv.cv_type.ttypes.CvMeasure.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'namedError', (ipin.rpc.common.ttypes.NamedError, ipin.rpc.common.ttypes.NamedError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, namedError=None,):
    self.success = success
    self.namedError = namedError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ipin.rpc.etl.cv.cv_type.ttypes.CvMeasure()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.namedError = ipin.rpc.common.ttypes.NamedError()
          self.namedError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('measureCv_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.namedError is not None:
      oprot.writeFieldBegin('namedError', TType.STRUCT, 1)
      self.namedError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.namedError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
